
lcd_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00002312  00002386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002312  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001b9c  00000000  00000000  000023f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000101f  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000050ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000525f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000096fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 b8 10 	call	0x2170	; 0x2170 <main>
      8e:	0c 94 87 11 	jmp	0x230e	; 0x230e <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__fixunssfsi>:
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	7b 01       	movw	r14, r22
      a0:	8c 01       	movw	r16, r24
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 4b 03 	call	0x696	; 0x696 <__gesf2>
      ae:	88 23       	and	r24, r24
      b0:	8c f0       	brlt	.+34     	; 0xd4 <__fixunssfsi+0x3e>
      b2:	c8 01       	movw	r24, r16
      b4:	b7 01       	movw	r22, r14
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	5f e4       	ldi	r21, 0x4F	; 79
      be:	0e 94 c3 01 	call	0x386	; 0x386 <__subsf3>
      c2:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      c6:	9b 01       	movw	r18, r22
      c8:	ac 01       	movw	r20, r24
      ca:	20 50       	subi	r18, 0x00	; 0
      cc:	30 40       	sbci	r19, 0x00	; 0
      ce:	40 40       	sbci	r20, 0x00	; 0
      d0:	50 48       	sbci	r21, 0x80	; 128
      d2:	06 c0       	rjmp	.+12     	; 0xe0 <__fixunssfsi+0x4a>
      d4:	c8 01       	movw	r24, r16
      d6:	b7 01       	movw	r22, r14
      d8:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
      dc:	9b 01       	movw	r18, r22
      de:	ac 01       	movw	r20, r24
      e0:	b9 01       	movw	r22, r18
      e2:	ca 01       	movw	r24, r20
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	ff 90       	pop	r15
      ea:	ef 90       	pop	r14
      ec:	08 95       	ret

000000ee <_fpadd_parts>:
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ed e7       	ldi	r30, 0x7D	; 125
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__>
      fa:	dc 01       	movw	r26, r24
      fc:	2b 01       	movw	r4, r22
      fe:	fa 01       	movw	r30, r20
     100:	9c 91       	ld	r25, X
     102:	92 30       	cpi	r25, 0x02	; 2
     104:	08 f4       	brcc	.+2      	; 0x108 <_fpadd_parts+0x1a>
     106:	39 c1       	rjmp	.+626    	; 0x37a <_fpadd_parts+0x28c>
     108:	eb 01       	movw	r28, r22
     10a:	88 81       	ld	r24, Y
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	08 f4       	brcc	.+2      	; 0x112 <_fpadd_parts+0x24>
     110:	33 c1       	rjmp	.+614    	; 0x378 <_fpadd_parts+0x28a>
     112:	94 30       	cpi	r25, 0x04	; 4
     114:	69 f4       	brne	.+26     	; 0x130 <_fpadd_parts+0x42>
     116:	84 30       	cpi	r24, 0x04	; 4
     118:	09 f0       	breq	.+2      	; 0x11c <_fpadd_parts+0x2e>
     11a:	2f c1       	rjmp	.+606    	; 0x37a <_fpadd_parts+0x28c>
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	9c 91       	ld	r25, X
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	89 81       	ldd	r24, Y+1	; 0x01
     124:	98 17       	cp	r25, r24
     126:	09 f4       	brne	.+2      	; 0x12a <_fpadd_parts+0x3c>
     128:	28 c1       	rjmp	.+592    	; 0x37a <_fpadd_parts+0x28c>
     12a:	a8 e2       	ldi	r26, 0x28	; 40
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	25 c1       	rjmp	.+586    	; 0x37a <_fpadd_parts+0x28c>
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	09 f4       	brne	.+2      	; 0x136 <_fpadd_parts+0x48>
     134:	21 c1       	rjmp	.+578    	; 0x378 <_fpadd_parts+0x28a>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	a9 f4       	brne	.+42     	; 0x164 <_fpadd_parts+0x76>
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	09 f0       	breq	.+2      	; 0x140 <_fpadd_parts+0x52>
     13e:	1d c1       	rjmp	.+570    	; 0x37a <_fpadd_parts+0x28c>
     140:	9a 01       	movw	r18, r20
     142:	ad 01       	movw	r20, r26
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	ea 01       	movw	r28, r20
     148:	09 90       	ld	r0, Y+
     14a:	ae 01       	movw	r20, r28
     14c:	e9 01       	movw	r28, r18
     14e:	09 92       	st	Y+, r0
     150:	9e 01       	movw	r18, r28
     152:	81 50       	subi	r24, 0x01	; 1
     154:	c1 f7       	brne	.-16     	; 0x146 <_fpadd_parts+0x58>
     156:	e2 01       	movw	r28, r4
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	9c 91       	ld	r25, X
     15e:	89 23       	and	r24, r25
     160:	81 83       	std	Z+1, r24	; 0x01
     162:	08 c1       	rjmp	.+528    	; 0x374 <_fpadd_parts+0x286>
     164:	92 30       	cpi	r25, 0x02	; 2
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x7c>
     168:	07 c1       	rjmp	.+526    	; 0x378 <_fpadd_parts+0x28a>
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2d 90       	ld	r2, X+
     16e:	3c 90       	ld	r3, X
     170:	13 97       	sbiw	r26, 0x03	; 3
     172:	eb 01       	movw	r28, r22
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	14 96       	adiw	r26, 0x04	; 4
     17a:	ad 90       	ld	r10, X+
     17c:	bd 90       	ld	r11, X+
     17e:	cd 90       	ld	r12, X+
     180:	dc 90       	ld	r13, X
     182:	17 97       	sbiw	r26, 0x07	; 7
     184:	ec 80       	ldd	r14, Y+4	; 0x04
     186:	fd 80       	ldd	r15, Y+5	; 0x05
     188:	0e 81       	ldd	r16, Y+6	; 0x06
     18a:	1f 81       	ldd	r17, Y+7	; 0x07
     18c:	91 01       	movw	r18, r2
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	b9 01       	movw	r22, r18
     194:	37 ff       	sbrs	r19, 7
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xb2>
     198:	66 27       	eor	r22, r22
     19a:	77 27       	eor	r23, r23
     19c:	62 1b       	sub	r22, r18
     19e:	73 0b       	sbc	r23, r19
     1a0:	60 32       	cpi	r22, 0x20	; 32
     1a2:	71 05       	cpc	r23, r1
     1a4:	0c f0       	brlt	.+2      	; 0x1a8 <_fpadd_parts+0xba>
     1a6:	61 c0       	rjmp	.+194    	; 0x26a <_fpadd_parts+0x17c>
     1a8:	12 16       	cp	r1, r18
     1aa:	13 06       	cpc	r1, r19
     1ac:	6c f5       	brge	.+90     	; 0x208 <_fpadd_parts+0x11a>
     1ae:	37 01       	movw	r6, r14
     1b0:	48 01       	movw	r8, r16
     1b2:	06 2e       	mov	r0, r22
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <_fpadd_parts+0xd0>
     1b6:	96 94       	lsr	r9
     1b8:	87 94       	ror	r8
     1ba:	77 94       	ror	r7
     1bc:	67 94       	ror	r6
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <_fpadd_parts+0xc8>
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <_fpadd_parts+0xe6>
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	44 1f       	adc	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	6a 95       	dec	r22
     1d6:	d2 f7       	brpl	.-12     	; 0x1cc <_fpadd_parts+0xde>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	40 40       	sbci	r20, 0x00	; 0
     1de:	50 40       	sbci	r21, 0x00	; 0
     1e0:	2e 21       	and	r18, r14
     1e2:	3f 21       	and	r19, r15
     1e4:	40 23       	and	r20, r16
     1e6:	51 23       	and	r21, r17
     1e8:	21 15       	cp	r18, r1
     1ea:	31 05       	cpc	r19, r1
     1ec:	41 05       	cpc	r20, r1
     1ee:	51 05       	cpc	r21, r1
     1f0:	21 f0       	breq	.+8      	; 0x1fa <_fpadd_parts+0x10c>
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	79 01       	movw	r14, r18
     1fc:	8a 01       	movw	r16, r20
     1fe:	e6 28       	or	r14, r6
     200:	f7 28       	or	r15, r7
     202:	08 29       	or	r16, r8
     204:	19 29       	or	r17, r9
     206:	3c c0       	rjmp	.+120    	; 0x280 <_fpadd_parts+0x192>
     208:	23 2b       	or	r18, r19
     20a:	d1 f1       	breq	.+116    	; 0x280 <_fpadd_parts+0x192>
     20c:	26 0e       	add	r2, r22
     20e:	37 1e       	adc	r3, r23
     210:	35 01       	movw	r6, r10
     212:	46 01       	movw	r8, r12
     214:	06 2e       	mov	r0, r22
     216:	04 c0       	rjmp	.+8      	; 0x220 <_fpadd_parts+0x132>
     218:	96 94       	lsr	r9
     21a:	87 94       	ror	r8
     21c:	77 94       	ror	r7
     21e:	67 94       	ror	r6
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <_fpadd_parts+0x12a>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	04 c0       	rjmp	.+8      	; 0x236 <_fpadd_parts+0x148>
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	44 1f       	adc	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	d2 f7       	brpl	.-12     	; 0x22e <_fpadd_parts+0x140>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	30 40       	sbci	r19, 0x00	; 0
     23e:	40 40       	sbci	r20, 0x00	; 0
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	2a 21       	and	r18, r10
     244:	3b 21       	and	r19, r11
     246:	4c 21       	and	r20, r12
     248:	5d 21       	and	r21, r13
     24a:	21 15       	cp	r18, r1
     24c:	31 05       	cpc	r19, r1
     24e:	41 05       	cpc	r20, r1
     250:	51 05       	cpc	r21, r1
     252:	21 f0       	breq	.+8      	; 0x25c <_fpadd_parts+0x16e>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	59 01       	movw	r10, r18
     25e:	6a 01       	movw	r12, r20
     260:	a6 28       	or	r10, r6
     262:	b7 28       	or	r11, r7
     264:	c8 28       	or	r12, r8
     266:	d9 28       	or	r13, r9
     268:	0b c0       	rjmp	.+22     	; 0x280 <_fpadd_parts+0x192>
     26a:	82 15       	cp	r24, r2
     26c:	93 05       	cpc	r25, r3
     26e:	2c f0       	brlt	.+10     	; 0x27a <_fpadd_parts+0x18c>
     270:	1c 01       	movw	r2, r24
     272:	aa 24       	eor	r10, r10
     274:	bb 24       	eor	r11, r11
     276:	65 01       	movw	r12, r10
     278:	03 c0       	rjmp	.+6      	; 0x280 <_fpadd_parts+0x192>
     27a:	ee 24       	eor	r14, r14
     27c:	ff 24       	eor	r15, r15
     27e:	87 01       	movw	r16, r14
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	9c 91       	ld	r25, X
     284:	d2 01       	movw	r26, r4
     286:	11 96       	adiw	r26, 0x01	; 1
     288:	8c 91       	ld	r24, X
     28a:	98 17       	cp	r25, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <_fpadd_parts+0x1a2>
     28e:	45 c0       	rjmp	.+138    	; 0x31a <_fpadd_parts+0x22c>
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <_fpadd_parts+0x1b4>
     294:	a8 01       	movw	r20, r16
     296:	97 01       	movw	r18, r14
     298:	2a 19       	sub	r18, r10
     29a:	3b 09       	sbc	r19, r11
     29c:	4c 09       	sbc	r20, r12
     29e:	5d 09       	sbc	r21, r13
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_fpadd_parts+0x1c0>
     2a2:	a6 01       	movw	r20, r12
     2a4:	95 01       	movw	r18, r10
     2a6:	2e 19       	sub	r18, r14
     2a8:	3f 09       	sbc	r19, r15
     2aa:	40 0b       	sbc	r20, r16
     2ac:	51 0b       	sbc	r21, r17
     2ae:	57 fd       	sbrc	r21, 7
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <_fpadd_parts+0x1d4>
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	33 82       	std	Z+3, r3	; 0x03
     2b6:	22 82       	std	Z+2, r2	; 0x02
     2b8:	24 83       	std	Z+4, r18	; 0x04
     2ba:	35 83       	std	Z+5, r19	; 0x05
     2bc:	46 83       	std	Z+6, r20	; 0x06
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	1d c0       	rjmp	.+58     	; 0x2fc <_fpadd_parts+0x20e>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	81 83       	std	Z+1, r24	; 0x01
     2c6:	33 82       	std	Z+3, r3	; 0x03
     2c8:	22 82       	std	Z+2, r2	; 0x02
     2ca:	88 27       	eor	r24, r24
     2cc:	99 27       	eor	r25, r25
     2ce:	dc 01       	movw	r26, r24
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	a4 0b       	sbc	r26, r20
     2d6:	b5 0b       	sbc	r27, r21
     2d8:	84 83       	std	Z+4, r24	; 0x04
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	a6 83       	std	Z+6, r26	; 0x06
     2de:	b7 83       	std	Z+7, r27	; 0x07
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <_fpadd_parts+0x20e>
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	44 1f       	adc	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	24 83       	std	Z+4, r18	; 0x04
     2ec:	35 83       	std	Z+5, r19	; 0x05
     2ee:	46 83       	std	Z+6, r20	; 0x06
     2f0:	57 83       	std	Z+7, r21	; 0x07
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	93 81       	ldd	r25, Z+3	; 0x03
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	93 83       	std	Z+3, r25	; 0x03
     2fa:	82 83       	std	Z+2, r24	; 0x02
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	35 81       	ldd	r19, Z+5	; 0x05
     300:	46 81       	ldd	r20, Z+6	; 0x06
     302:	57 81       	ldd	r21, Z+7	; 0x07
     304:	da 01       	movw	r26, r20
     306:	c9 01       	movw	r24, r18
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	9f 4f       	sbci	r25, 0xFF	; 255
     312:	af 4f       	sbci	r26, 0xFF	; 255
     314:	bf 43       	sbci	r27, 0x3F	; 63
     316:	28 f3       	brcs	.-54     	; 0x2e2 <_fpadd_parts+0x1f4>
     318:	0b c0       	rjmp	.+22     	; 0x330 <_fpadd_parts+0x242>
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	33 82       	std	Z+3, r3	; 0x03
     31e:	22 82       	std	Z+2, r2	; 0x02
     320:	ea 0c       	add	r14, r10
     322:	fb 1c       	adc	r15, r11
     324:	0c 1d       	adc	r16, r12
     326:	1d 1d       	adc	r17, r13
     328:	e4 82       	std	Z+4, r14	; 0x04
     32a:	f5 82       	std	Z+5, r15	; 0x05
     32c:	06 83       	std	Z+6, r16	; 0x06
     32e:	17 83       	std	Z+7, r17	; 0x07
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 83       	st	Z, r24
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	57 ff       	sbrs	r21, 7
     33e:	1a c0       	rjmp	.+52     	; 0x374 <_fpadd_parts+0x286>
     340:	c9 01       	movw	r24, r18
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	a0 70       	andi	r26, 0x00	; 0
     350:	b0 70       	andi	r27, 0x00	; 0
     352:	56 95       	lsr	r21
     354:	47 95       	ror	r20
     356:	37 95       	ror	r19
     358:	27 95       	ror	r18
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	a4 2b       	or	r26, r20
     360:	b5 2b       	or	r27, r21
     362:	84 83       	std	Z+4, r24	; 0x04
     364:	95 83       	std	Z+5, r25	; 0x05
     366:	a6 83       	std	Z+6, r26	; 0x06
     368:	b7 83       	std	Z+7, r27	; 0x07
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	93 81       	ldd	r25, Z+3	; 0x03
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	93 83       	std	Z+3, r25	; 0x03
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	df 01       	movw	r26, r30
     376:	01 c0       	rjmp	.+2      	; 0x37a <_fpadd_parts+0x28c>
     378:	d2 01       	movw	r26, r4
     37a:	cd 01       	movw	r24, r26
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	e2 e1       	ldi	r30, 0x12	; 18
     382:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__>

00000386 <__subsf3>:
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e9 ec       	ldi	r30, 0xC9	; 201
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__+0x18>
     392:	69 83       	std	Y+1, r22	; 0x01
     394:	7a 83       	std	Y+2, r23	; 0x02
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	9c 83       	std	Y+4, r25	; 0x04
     39a:	2d 83       	std	Y+5, r18	; 0x05
     39c:	3e 83       	std	Y+6, r19	; 0x06
     39e:	4f 83       	std	Y+7, r20	; 0x07
     3a0:	58 87       	std	Y+8, r21	; 0x08
     3a2:	e9 e0       	ldi	r30, 0x09	; 9
     3a4:	ee 2e       	mov	r14, r30
     3a6:	f1 2c       	mov	r15, r1
     3a8:	ec 0e       	add	r14, r28
     3aa:	fd 1e       	adc	r15, r29
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	b7 01       	movw	r22, r14
     3b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5e       	subi	r16, 0xEF	; 239
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	05 96       	adiw	r24, 0x05	; 5
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	89 27       	eor	r24, r25
     3cc:	8a 8b       	std	Y+18, r24	; 0x12
     3ce:	c7 01       	movw	r24, r14
     3d0:	b8 01       	movw	r22, r16
     3d2:	ae 01       	movw	r20, r28
     3d4:	47 5e       	subi	r20, 0xE7	; 231
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     3dc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     3e0:	a0 96       	adiw	r28, 0x20	; 32
     3e2:	e6 e0       	ldi	r30, 0x06	; 6
     3e4:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__+0x18>

000003e8 <__addsf3>:
     3e8:	a0 e2       	ldi	r26, 0x20	; 32
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea ef       	ldi	r30, 0xFA	; 250
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__+0x18>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	2d 83       	std	Y+5, r18	; 0x05
     3fe:	3e 83       	std	Y+6, r19	; 0x06
     400:	4f 83       	std	Y+7, r20	; 0x07
     402:	58 87       	std	Y+8, r21	; 0x08
     404:	f9 e0       	ldi	r31, 0x09	; 9
     406:	ef 2e       	mov	r14, r31
     408:	f1 2c       	mov	r15, r1
     40a:	ec 0e       	add	r14, r28
     40c:	fd 1e       	adc	r15, r29
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	b7 01       	movw	r22, r14
     414:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5e       	subi	r16, 0xEF	; 239
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	b8 01       	movw	r22, r16
     424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     428:	c7 01       	movw	r24, r14
     42a:	b8 01       	movw	r22, r16
     42c:	ae 01       	movw	r20, r28
     42e:	47 5e       	subi	r20, 0xE7	; 231
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	0e 94 77 00 	call	0xee	; 0xee <_fpadd_parts>
     436:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__+0x18>

00000442 <__mulsf3>:
     442:	a0 e2       	ldi	r26, 0x20	; 32
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e7 e2       	ldi	r30, 0x27	; 39
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__>
     44e:	69 83       	std	Y+1, r22	; 0x01
     450:	7a 83       	std	Y+2, r23	; 0x02
     452:	8b 83       	std	Y+3, r24	; 0x03
     454:	9c 83       	std	Y+4, r25	; 0x04
     456:	2d 83       	std	Y+5, r18	; 0x05
     458:	3e 83       	std	Y+6, r19	; 0x06
     45a:	4f 83       	std	Y+7, r20	; 0x07
     45c:	58 87       	std	Y+8, r21	; 0x08
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	67 5f       	subi	r22, 0xF7	; 247
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     46c:	ce 01       	movw	r24, r28
     46e:	05 96       	adiw	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6f 5e       	subi	r22, 0xEF	; 239
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     47a:	99 85       	ldd	r25, Y+9	; 0x09
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	88 f0       	brcs	.+34     	; 0x4a2 <__mulsf3+0x60>
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <__mulsf3+0x76>
     486:	94 30       	cpi	r25, 0x04	; 4
     488:	19 f4       	brne	.+6      	; 0x490 <__mulsf3+0x4e>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__mulsf3+0x60>
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__mulsf3+0x56>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	29 f4       	brne	.+10     	; 0x49e <__mulsf3+0x5c>
     494:	92 30       	cpi	r25, 0x02	; 2
     496:	81 f4       	brne	.+32     	; 0x4b8 <__mulsf3+0x76>
     498:	88 e2       	ldi	r24, 0x28	; 40
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	c6 c0       	rjmp	.+396    	; 0x62a <__mulsf3+0x1e8>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	49 f4       	brne	.+18     	; 0x4b4 <__mulsf3+0x72>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a6:	8a 89       	ldd	r24, Y+18	; 0x12
     4a8:	98 13       	cpse	r25, r24
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 96       	adiw	r24, 0x09	; 9
     4b2:	bb c0       	rjmp	.+374    	; 0x62a <__mulsf3+0x1e8>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	49 f4       	brne	.+18     	; 0x4ca <__mulsf3+0x88>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	98 13       	cpse	r25, r24
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	2a 8b       	std	Y+18, r18	; 0x12
     4c4:	ce 01       	movw	r24, r28
     4c6:	41 96       	adiw	r24, 0x11	; 17
     4c8:	b0 c0       	rjmp	.+352    	; 0x62a <__mulsf3+0x1e8>
     4ca:	2d 84       	ldd	r2, Y+13	; 0x0d
     4cc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ce:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d0:	58 88       	ldd	r5, Y+16	; 0x10
     4d2:	6d 88       	ldd	r6, Y+21	; 0x15
     4d4:	7e 88       	ldd	r7, Y+22	; 0x16
     4d6:	8f 88       	ldd	r8, Y+23	; 0x17
     4d8:	98 8c       	ldd	r9, Y+24	; 0x18
     4da:	ee 24       	eor	r14, r14
     4dc:	ff 24       	eor	r15, r15
     4de:	87 01       	movw	r16, r14
     4e0:	aa 24       	eor	r10, r10
     4e2:	bb 24       	eor	r11, r11
     4e4:	65 01       	movw	r12, r10
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	c1 01       	movw	r24, r2
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <__mulsf3+0xf4>
     4fc:	e6 0c       	add	r14, r6
     4fe:	f7 1c       	adc	r15, r7
     500:	08 1d       	adc	r16, r8
     502:	19 1d       	adc	r17, r9
     504:	9a 01       	movw	r18, r20
     506:	ab 01       	movw	r20, r22
     508:	2a 0d       	add	r18, r10
     50a:	3b 1d       	adc	r19, r11
     50c:	4c 1d       	adc	r20, r12
     50e:	5d 1d       	adc	r21, r13
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e6 14       	cp	r14, r6
     51a:	f7 04       	cpc	r15, r7
     51c:	08 05       	cpc	r16, r8
     51e:	19 05       	cpc	r17, r9
     520:	20 f4       	brcc	.+8      	; 0x52a <__mulsf3+0xe8>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	ba 01       	movw	r22, r20
     52c:	a9 01       	movw	r20, r18
     52e:	48 0f       	add	r20, r24
     530:	59 1f       	adc	r21, r25
     532:	6a 1f       	adc	r22, r26
     534:	7b 1f       	adc	r23, r27
     536:	aa 0c       	add	r10, r10
     538:	bb 1c       	adc	r11, r11
     53a:	cc 1c       	adc	r12, r12
     53c:	dd 1c       	adc	r13, r13
     53e:	97 fe       	sbrs	r9, 7
     540:	08 c0       	rjmp	.+16     	; 0x552 <__mulsf3+0x110>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e0       	ldi	r26, 0x00	; 0
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	a8 2a       	or	r10, r24
     54c:	b9 2a       	or	r11, r25
     54e:	ca 2a       	or	r12, r26
     550:	db 2a       	or	r13, r27
     552:	31 96       	adiw	r30, 0x01	; 1
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	f1 05       	cpc	r31, r1
     558:	49 f0       	breq	.+18     	; 0x56c <__mulsf3+0x12a>
     55a:	66 0c       	add	r6, r6
     55c:	77 1c       	adc	r7, r7
     55e:	88 1c       	adc	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	56 94       	lsr	r5
     564:	47 94       	ror	r4
     566:	37 94       	ror	r3
     568:	27 94       	ror	r2
     56a:	c3 cf       	rjmp	.-122    	; 0x4f2 <__mulsf3+0xb0>
     56c:	fa 85       	ldd	r31, Y+10	; 0x0a
     56e:	ea 89       	ldd	r30, Y+18	; 0x12
     570:	2b 89       	ldd	r18, Y+19	; 0x13
     572:	3c 89       	ldd	r19, Y+20	; 0x14
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	28 0f       	add	r18, r24
     57a:	39 1f       	adc	r19, r25
     57c:	2e 5f       	subi	r18, 0xFE	; 254
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__mulsf3+0x16e>
     582:	ca 01       	movw	r24, r20
     584:	81 70       	andi	r24, 0x01	; 1
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	61 f0       	breq	.+24     	; 0x5a4 <__mulsf3+0x162>
     58c:	16 95       	lsr	r17
     58e:	07 95       	ror	r16
     590:	f7 94       	ror	r15
     592:	e7 94       	ror	r14
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e8       	ldi	r27, 0x80	; 128
     59c:	e8 2a       	or	r14, r24
     59e:	f9 2a       	or	r15, r25
     5a0:	0a 2b       	or	r16, r26
     5a2:	1b 2b       	or	r17, r27
     5a4:	76 95       	lsr	r23
     5a6:	67 95       	ror	r22
     5a8:	57 95       	ror	r21
     5aa:	47 95       	ror	r20
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	77 fd       	sbrc	r23, 7
     5b2:	e7 cf       	rjmp	.-50     	; 0x582 <__mulsf3+0x140>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <__mulsf3+0x18c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	66 1f       	adc	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	17 fd       	sbrc	r17, 7
     5c0:	41 60       	ori	r20, 0x01	; 1
     5c2:	ee 0c       	add	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	00 1f       	adc	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	40 30       	cpi	r20, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	59 07       	cpc	r21, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	69 07       	cpc	r22, r25
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	79 07       	cpc	r23, r25
     5dc:	60 f3       	brcs	.-40     	; 0x5b6 <__mulsf3+0x174>
     5de:	2b 8f       	std	Y+27, r18	; 0x1b
     5e0:	3c 8f       	std	Y+28, r19	; 0x1c
     5e2:	db 01       	movw	r26, r22
     5e4:	ca 01       	movw	r24, r20
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	80 34       	cpi	r24, 0x40	; 64
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	61 f4       	brne	.+24     	; 0x610 <__mulsf3+0x1ce>
     5f8:	47 fd       	sbrc	r20, 7
     5fa:	0a c0       	rjmp	.+20     	; 0x610 <__mulsf3+0x1ce>
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	29 f0       	breq	.+10     	; 0x610 <__mulsf3+0x1ce>
     606:	40 5c       	subi	r20, 0xC0	; 192
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	6f 4f       	sbci	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	40 78       	andi	r20, 0x80	; 128
     610:	1a 8e       	std	Y+26, r1	; 0x1a
     612:	fe 17       	cp	r31, r30
     614:	11 f0       	breq	.+4      	; 0x61a <__mulsf3+0x1d8>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	8a 8f       	std	Y+26, r24	; 0x1a
     61a:	4d 8f       	std	Y+29, r20	; 0x1d
     61c:	5e 8f       	std	Y+30, r21	; 0x1e
     61e:	6f 8f       	std	Y+31, r22	; 0x1f
     620:	78 a3       	std	Y+32, r23	; 0x20
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	89 8f       	std	Y+25, r24	; 0x19
     626:	ce 01       	movw	r24, r28
     628:	49 96       	adiw	r24, 0x19	; 25
     62a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__pack_f>
     62e:	a0 96       	adiw	r28, 0x20	; 32
     630:	e2 e1       	ldi	r30, 0x12	; 18
     632:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__>

00000636 <__gtsf2>:
     636:	a8 e1       	ldi	r26, 0x18	; 24
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e1 e2       	ldi	r30, 0x21	; 33
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__+0x18>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	2d 83       	std	Y+5, r18	; 0x05
     64c:	3e 83       	std	Y+6, r19	; 0x06
     64e:	4f 83       	std	Y+7, r20	; 0x07
     650:	58 87       	std	Y+8, r21	; 0x08
     652:	89 e0       	ldi	r24, 0x09	; 9
     654:	e8 2e       	mov	r14, r24
     656:	f1 2c       	mov	r15, r1
     658:	ec 0e       	add	r14, r28
     65a:	fd 1e       	adc	r15, r29
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	b7 01       	movw	r22, r14
     662:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     666:	8e 01       	movw	r16, r28
     668:	0f 5e       	subi	r16, 0xEF	; 239
     66a:	1f 4f       	sbci	r17, 0xFF	; 255
     66c:	ce 01       	movw	r24, r28
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	b8 01       	movw	r22, r16
     672:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     676:	89 85       	ldd	r24, Y+9	; 0x09
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	40 f0       	brcs	.+16     	; 0x68c <__gtsf2+0x56>
     67c:	89 89       	ldd	r24, Y+17	; 0x11
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	28 f0       	brcs	.+10     	; 0x68c <__gtsf2+0x56>
     682:	c7 01       	movw	r24, r14
     684:	b8 01       	movw	r22, r16
     686:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     68a:	01 c0       	rjmp	.+2      	; 0x68e <__gtsf2+0x58>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	68 96       	adiw	r28, 0x18	; 24
     690:	e6 e0       	ldi	r30, 0x06	; 6
     692:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__+0x18>

00000696 <__gesf2>:
     696:	a8 e1       	ldi	r26, 0x18	; 24
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__+0x18>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	2d 83       	std	Y+5, r18	; 0x05
     6ac:	3e 83       	std	Y+6, r19	; 0x06
     6ae:	4f 83       	std	Y+7, r20	; 0x07
     6b0:	58 87       	std	Y+8, r21	; 0x08
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	e8 2e       	mov	r14, r24
     6b6:	f1 2c       	mov	r15, r1
     6b8:	ec 0e       	add	r14, r28
     6ba:	fd 1e       	adc	r15, r29
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	b7 01       	movw	r22, r14
     6c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5e       	subi	r16, 0xEF	; 239
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	05 96       	adiw	r24, 0x05	; 5
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	40 f0       	brcs	.+16     	; 0x6ec <__gesf2+0x56>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	28 f0       	brcs	.+10     	; 0x6ec <__gesf2+0x56>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b8 01       	movw	r22, r16
     6e6:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__gesf2+0x58>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	68 96       	adiw	r28, 0x18	; 24
     6f0:	e6 e0       	ldi	r30, 0x06	; 6
     6f2:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__+0x18>

000006f6 <__ltsf2>:
     6f6:	a8 e1       	ldi	r26, 0x18	; 24
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e1 e8       	ldi	r30, 0x81	; 129
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__+0x18>
     702:	69 83       	std	Y+1, r22	; 0x01
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 83       	std	Y+4, r25	; 0x04
     70a:	2d 83       	std	Y+5, r18	; 0x05
     70c:	3e 83       	std	Y+6, r19	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	58 87       	std	Y+8, r21	; 0x08
     712:	89 e0       	ldi	r24, 0x09	; 9
     714:	e8 2e       	mov	r14, r24
     716:	f1 2c       	mov	r15, r1
     718:	ec 0e       	add	r14, r28
     71a:	fd 1e       	adc	r15, r29
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	b7 01       	movw	r22, r14
     722:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     726:	8e 01       	movw	r16, r28
     728:	0f 5e       	subi	r16, 0xEF	; 239
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ce 01       	movw	r24, r28
     72e:	05 96       	adiw	r24, 0x05	; 5
     730:	b8 01       	movw	r22, r16
     732:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     736:	89 85       	ldd	r24, Y+9	; 0x09
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	40 f0       	brcs	.+16     	; 0x74c <__ltsf2+0x56>
     73c:	89 89       	ldd	r24, Y+17	; 0x11
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	28 f0       	brcs	.+10     	; 0x74c <__ltsf2+0x56>
     742:	c7 01       	movw	r24, r14
     744:	b8 01       	movw	r22, r16
     746:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fpcmp_parts_f>
     74a:	01 c0       	rjmp	.+2      	; 0x74e <__ltsf2+0x58>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	68 96       	adiw	r28, 0x18	; 24
     750:	e6 e0       	ldi	r30, 0x06	; 6
     752:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__+0x18>

00000756 <__fixsfsi>:
     756:	ac e0       	ldi	r26, 0x0C	; 12
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e1 eb       	ldi	r30, 0xB1	; 177
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x20>
     762:	69 83       	std	Y+1, r22	; 0x01
     764:	7a 83       	std	Y+2, r23	; 0x02
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	be 01       	movw	r22, r28
     770:	6b 5f       	subi	r22, 0xFB	; 251
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__unpack_f>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	61 f1       	breq	.+88     	; 0x7d6 <__fixsfsi+0x80>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	50 f1       	brcs	.+84     	; 0x7d6 <__fixsfsi+0x80>
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	21 f4       	brne	.+8      	; 0x78e <__fixsfsi+0x38>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__fixsfsi+0x8a>
     78c:	2e c0       	rjmp	.+92     	; 0x7ea <__fixsfsi+0x94>
     78e:	2f 81       	ldd	r18, Y+7	; 0x07
     790:	38 85       	ldd	r19, Y+8	; 0x08
     792:	37 fd       	sbrc	r19, 7
     794:	20 c0       	rjmp	.+64     	; 0x7d6 <__fixsfsi+0x80>
     796:	6e 81       	ldd	r22, Y+6	; 0x06
     798:	2f 31       	cpi	r18, 0x1F	; 31
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <__fixsfsi+0x4e>
     79e:	66 23       	and	r22, r22
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__fixsfsi+0x8a>
     7a2:	23 c0       	rjmp	.+70     	; 0x7ea <__fixsfsi+0x94>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__fixsfsi+0x68>
     7b6:	56 95       	lsr	r21
     7b8:	47 95       	ror	r20
     7ba:	37 95       	ror	r19
     7bc:	27 95       	ror	r18
     7be:	8a 95       	dec	r24
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__fixsfsi+0x60>
     7c2:	66 23       	and	r22, r22
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <__fixsfsi+0x9c>
     7c6:	50 95       	com	r21
     7c8:	40 95       	com	r20
     7ca:	30 95       	com	r19
     7cc:	21 95       	neg	r18
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	4f 4f       	sbci	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <__fixsfsi+0x9c>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f ef       	ldi	r20, 0xFF	; 255
     7e6:	5f e7       	ldi	r21, 0x7F	; 127
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fixsfsi+0x9c>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e8       	ldi	r21, 0x80	; 128
     7f2:	b9 01       	movw	r22, r18
     7f4:	ca 01       	movw	r24, r20
     7f6:	2c 96       	adiw	r28, 0x0c	; 12
     7f8:	e2 e0       	ldi	r30, 0x02	; 2
     7fa:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x20>

000007fe <__pack_f>:
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	fc 01       	movw	r30, r24
     80a:	e4 80       	ldd	r14, Z+4	; 0x04
     80c:	f5 80       	ldd	r15, Z+5	; 0x05
     80e:	06 81       	ldd	r16, Z+6	; 0x06
     810:	17 81       	ldd	r17, Z+7	; 0x07
     812:	d1 80       	ldd	r13, Z+1	; 0x01
     814:	80 81       	ld	r24, Z
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	48 f4       	brcc	.+18     	; 0x82c <__pack_f+0x2e>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a0 e1       	ldi	r26, 0x10	; 16
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 2a       	or	r14, r24
     824:	f9 2a       	or	r15, r25
     826:	0a 2b       	or	r16, r26
     828:	1b 2b       	or	r17, r27
     82a:	a5 c0       	rjmp	.+330    	; 0x976 <__stack+0x77>
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	09 f4       	brne	.+2      	; 0x832 <__pack_f+0x34>
     830:	9f c0       	rjmp	.+318    	; 0x970 <__stack+0x71>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	21 f4       	brne	.+8      	; 0x83e <__pack_f+0x40>
     836:	ee 24       	eor	r14, r14
     838:	ff 24       	eor	r15, r15
     83a:	87 01       	movw	r16, r14
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__pack_f+0x4a>
     83e:	e1 14       	cp	r14, r1
     840:	f1 04       	cpc	r15, r1
     842:	01 05       	cpc	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	19 f4       	brne	.+6      	; 0x84e <__pack_f+0x50>
     848:	e0 e0       	ldi	r30, 0x00	; 0
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	96 c0       	rjmp	.+300    	; 0x97a <__stack+0x7b>
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	62 38       	cpi	r22, 0x82	; 130
     856:	79 07       	cpc	r23, r25
     858:	0c f0       	brlt	.+2      	; 0x85c <__pack_f+0x5e>
     85a:	5b c0       	rjmp	.+182    	; 0x912 <__stack+0x13>
     85c:	22 e8       	ldi	r18, 0x82	; 130
     85e:	3f ef       	ldi	r19, 0xFF	; 255
     860:	26 1b       	sub	r18, r22
     862:	37 0b       	sbc	r19, r23
     864:	2a 31       	cpi	r18, 0x1A	; 26
     866:	31 05       	cpc	r19, r1
     868:	2c f0       	brlt	.+10     	; 0x874 <__pack_f+0x76>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2a c0       	rjmp	.+84     	; 0x8c8 <__pack_f+0xca>
     874:	b8 01       	movw	r22, r16
     876:	a7 01       	movw	r20, r14
     878:	02 2e       	mov	r0, r18
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__pack_f+0x86>
     87c:	76 95       	lsr	r23
     87e:	67 95       	ror	r22
     880:	57 95       	ror	r21
     882:	47 95       	ror	r20
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__pack_f+0x7e>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__pack_f+0x9c>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	2a 95       	dec	r18
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__pack_f+0x94>
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	a1 09       	sbc	r26, r1
     8a2:	b1 09       	sbc	r27, r1
     8a4:	8e 21       	and	r24, r14
     8a6:	9f 21       	and	r25, r15
     8a8:	a0 23       	and	r26, r16
     8aa:	b1 23       	and	r27, r17
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 05       	cpc	r27, r1
     8b2:	21 f0       	breq	.+8      	; 0x8bc <__pack_f+0xbe>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	9a 01       	movw	r18, r20
     8be:	ab 01       	movw	r20, r22
     8c0:	28 2b       	or	r18, r24
     8c2:	39 2b       	or	r19, r25
     8c4:	4a 2b       	or	r20, r26
     8c6:	5b 2b       	or	r21, r27
     8c8:	da 01       	movw	r26, r20
     8ca:	c9 01       	movw	r24, r18
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	80 34       	cpi	r24, 0x40	; 64
     8d6:	91 05       	cpc	r25, r1
     8d8:	a1 05       	cpc	r26, r1
     8da:	b1 05       	cpc	r27, r1
     8dc:	39 f4       	brne	.+14     	; 0x8ec <__pack_f+0xee>
     8de:	27 ff       	sbrs	r18, 7
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__pack_f+0xf6>
     8e2:	20 5c       	subi	r18, 0xC0	; 192
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	4f 4f       	sbci	r20, 0xFF	; 255
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__pack_f+0xf6>
     8ec:	21 5c       	subi	r18, 0xC1	; 193
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	4f 4f       	sbci	r20, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	20 30       	cpi	r18, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	3a 07       	cpc	r19, r26
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	4a 07       	cpc	r20, r26
     902:	a0 e4       	ldi	r26, 0x40	; 64
     904:	5a 07       	cpc	r21, r26
     906:	10 f0       	brcs	.+4      	; 0x90c <__stack+0xd>
     908:	e1 e0       	ldi	r30, 0x01	; 1
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	79 01       	movw	r14, r18
     90e:	8a 01       	movw	r16, r20
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x61>
     912:	60 38       	cpi	r22, 0x80	; 128
     914:	71 05       	cpc	r23, r1
     916:	64 f5       	brge	.+88     	; 0x970 <__stack+0x71>
     918:	fb 01       	movw	r30, r22
     91a:	e1 58       	subi	r30, 0x81	; 129
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	d8 01       	movw	r26, r16
     920:	c7 01       	movw	r24, r14
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	90 70       	andi	r25, 0x00	; 0
     926:	a0 70       	andi	r26, 0x00	; 0
     928:	b0 70       	andi	r27, 0x00	; 0
     92a:	80 34       	cpi	r24, 0x40	; 64
     92c:	91 05       	cpc	r25, r1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	39 f4       	brne	.+14     	; 0x942 <__stack+0x43>
     934:	e7 fe       	sbrs	r14, 7
     936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0x53>
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e8 0e       	add	r14, r24
     94c:	f9 1e       	adc	r15, r25
     94e:	0a 1f       	adc	r16, r26
     950:	1b 1f       	adc	r17, r27
     952:	17 ff       	sbrs	r17, 7
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
     956:	16 95       	lsr	r17
     958:	07 95       	ror	r16
     95a:	f7 94       	ror	r15
     95c:	e7 94       	ror	r14
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d1 f7       	brne	.-12     	; 0x962 <__stack+0x63>
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
     970:	ee 24       	eor	r14, r14
     972:	ff 24       	eor	r15, r15
     974:	87 01       	movw	r16, r14
     976:	ef ef       	ldi	r30, 0xFF	; 255
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	6e 2f       	mov	r22, r30
     97c:	67 95       	ror	r22
     97e:	66 27       	eor	r22, r22
     980:	67 95       	ror	r22
     982:	90 2f       	mov	r25, r16
     984:	9f 77       	andi	r25, 0x7F	; 127
     986:	d7 94       	ror	r13
     988:	dd 24       	eor	r13, r13
     98a:	d7 94       	ror	r13
     98c:	8e 2f       	mov	r24, r30
     98e:	86 95       	lsr	r24
     990:	49 2f       	mov	r20, r25
     992:	46 2b       	or	r20, r22
     994:	58 2f       	mov	r21, r24
     996:	5d 29       	or	r21, r13
     998:	b7 01       	movw	r22, r14
     99a:	ca 01       	movw	r24, r20
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	08 95       	ret

000009a8 <__unpack_f>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	db 01       	movw	r26, r22
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	62 2f       	mov	r22, r18
     9b4:	6f 77       	andi	r22, 0x7F	; 127
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	22 1f       	adc	r18, r18
     9ba:	22 27       	eor	r18, r18
     9bc:	22 1f       	adc	r18, r18
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	89 2f       	mov	r24, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	82 2b       	or	r24, r18
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	99 1f       	adc	r25, r25
     9cc:	99 27       	eor	r25, r25
     9ce:	99 1f       	adc	r25, r25
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	9c 93       	st	X, r25
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	21 15       	cp	r18, r1
     9d8:	31 05       	cpc	r19, r1
     9da:	a9 f5       	brne	.+106    	; 0xa46 <__unpack_f+0x9e>
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	61 05       	cpc	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__unpack_f+0x42>
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	37 c0       	rjmp	.+110    	; 0xa58 <__unpack_f+0xb0>
     9ea:	82 e8       	ldi	r24, 0x82	; 130
     9ec:	9f ef       	ldi	r25, 0xFF	; 255
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	12 97       	sbiw	r26, 0x02	; 2
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	44 1f       	adc	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	6a 95       	dec	r22
     a06:	d1 f7       	brne	.-12     	; 0x9fc <__unpack_f+0x54>
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8c 93       	st	X, r24
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__unpack_f+0x80>
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	44 1f       	adc	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	8d 91       	ld	r24, X+
     a1a:	9c 91       	ld	r25, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	9c 93       	st	X, r25
     a24:	8e 93       	st	-X, r24
     a26:	12 97       	sbiw	r26, 0x02	; 2
     a28:	20 30       	cpi	r18, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	38 07       	cpc	r19, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	48 07       	cpc	r20, r24
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	58 07       	cpc	r21, r24
     a36:	58 f3       	brcs	.-42     	; 0xa0e <__unpack_f+0x66>
     a38:	14 96       	adiw	r26, 0x04	; 4
     a3a:	2d 93       	st	X+, r18
     a3c:	3d 93       	st	X+, r19
     a3e:	4d 93       	st	X+, r20
     a40:	5c 93       	st	X, r21
     a42:	17 97       	sbiw	r26, 0x07	; 7
     a44:	08 95       	ret
     a46:	2f 3f       	cpi	r18, 0xFF	; 255
     a48:	31 05       	cpc	r19, r1
     a4a:	79 f4       	brne	.+30     	; 0xa6a <__unpack_f+0xc2>
     a4c:	41 15       	cp	r20, r1
     a4e:	51 05       	cpc	r21, r1
     a50:	61 05       	cpc	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <__unpack_f+0xb4>
     a56:	84 e0       	ldi	r24, 0x04	; 4
     a58:	8c 93       	st	X, r24
     a5a:	08 95       	ret
     a5c:	64 ff       	sbrs	r22, 4
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <__unpack_f+0xbe>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	8c 93       	st	X, r24
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <__unpack_f+0xe2>
     a66:	1c 92       	st	X, r1
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <__unpack_f+0xe2>
     a6a:	2f 57       	subi	r18, 0x7F	; 127
     a6c:	30 40       	sbci	r19, 0x00	; 0
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 93       	st	X, r24
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	66 1f       	adc	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	8a 95       	dec	r24
     a86:	d1 f7       	brne	.-12     	; 0xa7c <__unpack_f+0xd4>
     a88:	70 64       	ori	r23, 0x40	; 64
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	4d 93       	st	X+, r20
     a8e:	5d 93       	st	X+, r21
     a90:	6d 93       	st	X+, r22
     a92:	7c 93       	st	X, r23
     a94:	17 97       	sbiw	r26, 0x07	; 7
     a96:	08 95       	ret

00000a98 <__fpcmp_parts_f>:
     a98:	1f 93       	push	r17
     a9a:	dc 01       	movw	r26, r24
     a9c:	fb 01       	movw	r30, r22
     a9e:	9c 91       	ld	r25, X
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__fpcmp_parts_f+0xe>
     aa4:	47 c0       	rjmp	.+142    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aa6:	80 81       	ld	r24, Z
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__fpcmp_parts_f+0x16>
     aac:	43 c0       	rjmp	.+134    	; 0xb34 <__fpcmp_parts_f+0x9c>
     aae:	94 30       	cpi	r25, 0x04	; 4
     ab0:	51 f4       	brne	.+20     	; 0xac6 <__fpcmp_parts_f+0x2e>
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	1c 91       	ld	r17, X
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	99 f5       	brne	.+102    	; 0xb20 <__fpcmp_parts_f+0x88>
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	68 2f       	mov	r22, r24
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	61 1b       	sub	r22, r17
     ac2:	71 09       	sbc	r23, r1
     ac4:	3f c0       	rjmp	.+126    	; 0xb44 <__fpcmp_parts_f+0xac>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	21 f0       	breq	.+8      	; 0xad2 <__fpcmp_parts_f+0x3a>
     aca:	92 30       	cpi	r25, 0x02	; 2
     acc:	31 f4       	brne	.+12     	; 0xada <__fpcmp_parts_f+0x42>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	b9 f1       	breq	.+110    	; 0xb40 <__fpcmp_parts_f+0xa8>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	89 f1       	breq	.+98     	; 0xb3a <__fpcmp_parts_f+0xa2>
     ad8:	2d c0       	rjmp	.+90     	; 0xb34 <__fpcmp_parts_f+0x9c>
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	1c 91       	ld	r17, X
     ade:	11 97       	sbiw	r26, 0x01	; 1
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	f1 f0       	breq	.+60     	; 0xb20 <__fpcmp_parts_f+0x88>
     ae4:	81 81       	ldd	r24, Z+1	; 0x01
     ae6:	18 17       	cp	r17, r24
     ae8:	d9 f4       	brne	.+54     	; 0xb20 <__fpcmp_parts_f+0x88>
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	13 97       	sbiw	r26, 0x03	; 3
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	94 f0       	brlt	.+36     	; 0xb20 <__fpcmp_parts_f+0x88>
     afc:	28 17       	cp	r18, r24
     afe:	39 07       	cpc	r19, r25
     b00:	bc f0       	brlt	.+46     	; 0xb30 <__fpcmp_parts_f+0x98>
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	8d 91       	ld	r24, X+
     b06:	9d 91       	ld	r25, X+
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	24 81       	ldd	r18, Z+4	; 0x04
     b10:	35 81       	ldd	r19, Z+5	; 0x05
     b12:	46 81       	ldd	r20, Z+6	; 0x06
     b14:	57 81       	ldd	r21, Z+7	; 0x07
     b16:	28 17       	cp	r18, r24
     b18:	39 07       	cpc	r19, r25
     b1a:	4a 07       	cpc	r20, r26
     b1c:	5b 07       	cpc	r21, r27
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <__fpcmp_parts_f+0x8e>
     b20:	11 23       	and	r17, r17
     b22:	41 f0       	breq	.+16     	; 0xb34 <__fpcmp_parts_f+0x9c>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <__fpcmp_parts_f+0xa2>
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	a4 07       	cpc	r26, r20
     b2c:	b5 07       	cpc	r27, r21
     b2e:	40 f4       	brcc	.+16     	; 0xb40 <__fpcmp_parts_f+0xa8>
     b30:	11 23       	and	r17, r17
     b32:	19 f0       	breq	.+6      	; 0xb3a <__fpcmp_parts_f+0xa2>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__fpcmp_parts_f+0xac>
     b3a:	6f ef       	ldi	r22, 0xFF	; 255
     b3c:	7f ef       	ldi	r23, 0xFF	; 255
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__fpcmp_parts_f+0xac>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	cb 01       	movw	r24, r22
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <gpio_init>:
static void gpio_setPinDirection(port_t port, pin_t pin, pinDirection_t direction);


/* Public */
void gpio_init(void)
{
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <gpio_init+0x6>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
    int i;
    for (i = 0; i < numOfConfiguredPins; i++ )
     b54:	1a 82       	std	Y+2, r1	; 0x02
     b56:	19 82       	std	Y+1, r1	; 0x01
     b58:	53 c0       	rjmp	.+166    	; 0xc00 <gpio_init+0xb6>
    {
        gpio_setPinDirection((gpioConfigSet[i].port), (gpioConfigSet[i].pin), (gpioConfigSet[i].direction));
     b5a:	29 81       	ldd	r18, Y+1	; 0x01
     b5c:	3a 81       	ldd	r19, Y+2	; 0x02
     b5e:	c9 01       	movw	r24, r18
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	fc 01       	movw	r30, r24
     b6a:	e0 5d       	subi	r30, 0xD0	; 208
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	50 81       	ld	r21, Z
     b70:	29 81       	ldd	r18, Y+1	; 0x01
     b72:	3a 81       	ldd	r19, Y+2	; 0x02
     b74:	c9 01       	movw	r24, r18
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	fc 01       	movw	r30, r24
     b80:	ef 5c       	subi	r30, 0xCF	; 207
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	40 81       	ld	r20, Z
     b86:	29 81       	ldd	r18, Y+1	; 0x01
     b88:	3a 81       	ldd	r19, Y+2	; 0x02
     b8a:	c9 01       	movw	r24, r18
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	82 0f       	add	r24, r18
     b92:	93 1f       	adc	r25, r19
     b94:	fc 01       	movw	r30, r24
     b96:	ee 5c       	subi	r30, 0xCE	; 206
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	90 81       	ld	r25, Z
     b9c:	85 2f       	mov	r24, r21
     b9e:	64 2f       	mov	r22, r20
     ba0:	49 2f       	mov	r20, r25
     ba2:	0e 94 89 07 	call	0xf12	; 0xf12 <gpio_setPinDirection>

        /* Output default level (PIN_LOW) on output pins */
        if ((gpioConfigSet[i].direction) == PIN_OUTPUT)
     ba6:	29 81       	ldd	r18, Y+1	; 0x01
     ba8:	3a 81       	ldd	r19, Y+2	; 0x02
     baa:	c9 01       	movw	r24, r18
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	fc 01       	movw	r30, r24
     bb6:	ee 5c       	subi	r30, 0xCE	; 206
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	80 81       	ld	r24, Z
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	d9 f4       	brne	.+54     	; 0xbf6 <gpio_init+0xac>
        {
            gpio_writeChannel((gpioConfigSet[i].port), (gpioConfigSet[i].pin), PIN_LOW);
     bc0:	29 81       	ldd	r18, Y+1	; 0x01
     bc2:	3a 81       	ldd	r19, Y+2	; 0x02
     bc4:	c9 01       	movw	r24, r18
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	fc 01       	movw	r30, r24
     bd0:	e0 5d       	subi	r30, 0xD0	; 208
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	40 81       	ld	r20, Z
     bd6:	29 81       	ldd	r18, Y+1	; 0x01
     bd8:	3a 81       	ldd	r19, Y+2	; 0x02
     bda:	c9 01       	movw	r24, r18
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	82 0f       	add	r24, r18
     be2:	93 1f       	adc	r25, r19
     be4:	fc 01       	movw	r30, r24
     be6:	ef 5c       	subi	r30, 0xCF	; 207
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	90 81       	ld	r25, Z
     bec:	84 2f       	mov	r24, r20
     bee:	69 2f       	mov	r22, r25
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>

/* Public */
void gpio_init(void)
{
    int i;
    for (i = 0; i < numOfConfiguredPins; i++ )
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	80 91 6c 01 	lds	r24, 0x016C
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	82 17       	cp	r24, r18
     c0e:	93 07       	cpc	r25, r19
     c10:	0c f4       	brge	.+2      	; 0xc14 <gpio_init+0xca>
     c12:	a3 cf       	rjmp	.-186    	; 0xb5a <gpio_init+0x10>
        {
            gpio_writeChannel((gpioConfigSet[i].port), (gpioConfigSet[i].pin), PIN_LOW);
        }
    }

}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <gpio_writeChannel>:

void gpio_writeChannel(port_t port, pin_t pin, pinLevel_t level)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <gpio_writeChannel+0x6>
     c24:	00 d0       	rcall	.+0      	; 0xc26 <gpio_writeChannel+0x8>
     c26:	0f 92       	push	r0
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	6a 83       	std	Y+2, r22	; 0x02
     c30:	4b 83       	std	Y+3, r20	; 0x03
    switch(port)
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	3d 83       	std	Y+5, r19	; 0x05
     c3a:	2c 83       	std	Y+4, r18	; 0x04
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	9d 81       	ldd	r25, Y+5	; 0x05
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	91 05       	cpc	r25, r1
     c44:	b9 f1       	breq	.+110    	; 0xcb4 <gpio_writeChannel+0x96>
     c46:	2c 81       	ldd	r18, Y+4	; 0x04
     c48:	3d 81       	ldd	r19, Y+5	; 0x05
     c4a:	22 30       	cpi	r18, 0x02	; 2
     c4c:	31 05       	cpc	r19, r1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <gpio_writeChannel+0x34>
     c50:	5d c0       	rjmp	.+186    	; 0xd0c <gpio_writeChannel+0xee>
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	9d 81       	ldd	r25, Y+5	; 0x05
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <gpio_writeChannel+0x3e>
     c5a:	83 c0       	rjmp	.+262    	; 0xd62 <gpio_writeChannel+0x144>
    {
        case PORT_B:
        if ( level == PIN_LOW)
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	88 23       	and	r24, r24
     c60:	a9 f4       	brne	.+42     	; 0xc8c <gpio_writeChannel+0x6e>
        {
            CLEAR_BIT(PORTB, pin);
     c62:	a5 e2       	ldi	r26, 0x25	; 37
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e2       	ldi	r30, 0x25	; 37
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <gpio_writeChannel+0x62>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <gpio_writeChannel+0x5e>
     c84:	80 95       	com	r24
     c86:	84 23       	and	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	6b c0       	rjmp	.+214    	; 0xd62 <gpio_writeChannel+0x144>
        }
        else
        {
            SET_BIT(PORTB, pin);
     c8c:	a5 e2       	ldi	r26, 0x25	; 37
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e2       	ldi	r30, 0x25	; 37
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <gpio_writeChannel+0x8c>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <gpio_writeChannel+0x88>
     cae:	84 2b       	or	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	57 c0       	rjmp	.+174    	; 0xd62 <gpio_writeChannel+0x144>
        }
        break;

        case PORT_C:
        if ( level == PIN_LOW)
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	88 23       	and	r24, r24
     cb8:	a9 f4       	brne	.+42     	; 0xce4 <gpio_writeChannel+0xc6>
        {
            CLEAR_BIT(PORTC, pin);
     cba:	a8 e2       	ldi	r26, 0x28	; 40
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e8 e2       	ldi	r30, 0x28	; 40
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <gpio_writeChannel+0xba>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <gpio_writeChannel+0xb6>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <gpio_writeChannel+0x144>
        }
        else
        {
            SET_BIT(PORTC, pin);
     ce4:	a8 e2       	ldi	r26, 0x28	; 40
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 e2       	ldi	r30, 0x28	; 40
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <gpio_writeChannel+0xe4>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <gpio_writeChannel+0xe0>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	2b c0       	rjmp	.+86     	; 0xd62 <gpio_writeChannel+0x144>
        }
        break;

        case PORT_D:
        if ( level == PIN_LOW)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 23       	and	r24, r24
     d10:	a9 f4       	brne	.+42     	; 0xd3c <gpio_writeChannel+0x11e>
        {
            CLEAR_BIT(PORTD, pin);
     d12:	ab e2       	ldi	r26, 0x2B	; 43
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	eb e2       	ldi	r30, 0x2B	; 43
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <gpio_writeChannel+0x112>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <gpio_writeChannel+0x10e>
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	13 c0       	rjmp	.+38     	; 0xd62 <gpio_writeChannel+0x144>
        }
        else
        {
            SET_BIT(PORTD, pin);
     d3c:	ab e2       	ldi	r26, 0x2B	; 43
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	eb e2       	ldi	r30, 0x2B	; 43
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <gpio_writeChannel+0x13c>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <gpio_writeChannel+0x138>
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
        }
        break;
    }

}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <gpio_readChannel>:

pinLevel_t gpio_readChannel(port_t port, pin_t pin)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <gpio_readChannel+0x6>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <gpio_readChannel+0x8>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	6b 83       	std	Y+3, r22	; 0x03
    pinLevel_t return_value = 0;
     d84:	19 82       	std	Y+1, r1	; 0x01

    switch(port)
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	3d 83       	std	Y+5, r19	; 0x05
     d8e:	2c 83       	std	Y+4, r18	; 0x04
     d90:	4c 81       	ldd	r20, Y+4	; 0x04
     d92:	5d 81       	ldd	r21, Y+5	; 0x05
     d94:	41 30       	cpi	r20, 0x01	; 1
     d96:	51 05       	cpc	r21, r1
     d98:	19 f1       	breq	.+70     	; 0xde0 <gpio_readChannel+0x6e>
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9d 81       	ldd	r25, Y+5	; 0x05
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	91 05       	cpc	r25, r1
     da2:	b1 f1       	breq	.+108    	; 0xe10 <gpio_readChannel+0x9e>
     da4:	2c 81       	ldd	r18, Y+4	; 0x04
     da6:	3d 81       	ldd	r19, Y+5	; 0x05
     da8:	21 15       	cp	r18, r1
     daa:	31 05       	cpc	r19, r1
     dac:	09 f0       	breq	.+2      	; 0xdb0 <gpio_readChannel+0x3e>
     dae:	47 c0       	rjmp	.+142    	; 0xe3e <gpio_readChannel+0xcc>
    {
        case PORT_B:
        if (BIT_IS_SET(PINB, pin))
     db0:	e3 e2       	ldi	r30, 0x23	; 35
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a9 01       	movw	r20, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <gpio_readChannel+0x56>
     dc4:	55 95       	asr	r21
     dc6:	47 95       	ror	r20
     dc8:	8a 95       	dec	r24
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <gpio_readChannel+0x52>
     dcc:	ca 01       	movw	r24, r20
     dce:	81 70       	andi	r24, 0x01	; 1
     dd0:	90 70       	andi	r25, 0x00	; 0
     dd2:	88 23       	and	r24, r24
     dd4:	19 f0       	breq	.+6      	; 0xddc <gpio_readChannel+0x6a>
        {
            return_value = PIN_HIGH;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	31 c0       	rjmp	.+98     	; 0xe3e <gpio_readChannel+0xcc>
        }
        else
        {
            return_value = PIN_LOW;
     ddc:	19 82       	std	Y+1, r1	; 0x01
     dde:	2f c0       	rjmp	.+94     	; 0xe3e <gpio_readChannel+0xcc>
        }
        break;

        case PORT_C:
        if (BIT_IS_SET(PINC, pin))
     de0:	e6 e2       	ldi	r30, 0x26	; 38
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <gpio_readChannel+0x86>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <gpio_readChannel+0x82>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	88 23       	and	r24, r24
     e04:	19 f0       	breq	.+6      	; 0xe0c <gpio_readChannel+0x9a>
        {
            return_value = PIN_HIGH;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	19 c0       	rjmp	.+50     	; 0xe3e <gpio_readChannel+0xcc>
        }
        else
        {
            return_value = PIN_LOW;
     e0c:	19 82       	std	Y+1, r1	; 0x01
     e0e:	17 c0       	rjmp	.+46     	; 0xe3e <gpio_readChannel+0xcc>
        }
        break;

        case PORT_D:
        if ( BIT_IS_SET(PIND, pin))
     e10:	e9 e2       	ldi	r30, 0x29	; 41
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a9 01       	movw	r20, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <gpio_readChannel+0xb6>
     e24:	55 95       	asr	r21
     e26:	47 95       	ror	r20
     e28:	8a 95       	dec	r24
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <gpio_readChannel+0xb2>
     e2c:	ca 01       	movw	r24, r20
     e2e:	81 70       	andi	r24, 0x01	; 1
     e30:	90 70       	andi	r25, 0x00	; 0
     e32:	88 23       	and	r24, r24
     e34:	19 f0       	breq	.+6      	; 0xe3c <gpio_readChannel+0xca>
        {
            return_value = PIN_HIGH;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <gpio_readChannel+0xcc>
        }
        else
        {
            return_value = PIN_LOW;
     e3c:	19 82       	std	Y+1, r1	; 0x01
        }
        break;

    }
    return return_value;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <gpio_writePort>:

void gpio_writePort(port_t port, portLevel_t level)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <gpio_writePort+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <gpio_writePort+0x8>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	6a 83       	std	Y+2, r22	; 0x02
    switch(port)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3c 83       	std	Y+4, r19	; 0x04
     e68:	2b 83       	std	Y+3, r18	; 0x03
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	71 f0       	breq	.+28     	; 0xe90 <gpio_writePort+0x40>
     e74:	2b 81       	ldd	r18, Y+3	; 0x03
     e76:	3c 81       	ldd	r19, Y+4	; 0x04
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	71 f0       	breq	.+28     	; 0xe9a <gpio_writePort+0x4a>
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	71 f4       	brne	.+28     	; 0xea2 <gpio_writePort+0x52>
    {
        case PORT_B:
        PORTB = level;
     e86:	e5 e2       	ldi	r30, 0x25	; 37
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	80 83       	st	Z, r24
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <gpio_writePort+0x52>
        break;

        case PORT_C:
        PORTC = level;
     e90:	e8 e2       	ldi	r30, 0x28	; 40
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	80 83       	st	Z, r24
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <gpio_writePort+0x52>
        break;

        case PORT_D:
        PORTD = level;
     e9a:	eb e2       	ldi	r30, 0x2B	; 43
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	80 83       	st	Z, r24
        break;
    }
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <gpio_readPort>:

portLevel_t gpio_readPort(port_t port)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <gpio_readPort+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <gpio_readPort+0x8>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	8a 83       	std	Y+2, r24	; 0x02
    portLevel_t return_level = 0;
     ebe:	19 82       	std	Y+1, r1	; 0x01

    switch(port)
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3c 83       	std	Y+4, r19	; 0x04
     ec8:	2b 83       	std	Y+3, r18	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	91 05       	cpc	r25, r1
     ed2:	71 f0       	breq	.+28     	; 0xef0 <gpio_readPort+0x40>
     ed4:	2b 81       	ldd	r18, Y+3	; 0x03
     ed6:	3c 81       	ldd	r19, Y+4	; 0x04
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	71 f0       	breq	.+28     	; 0xefa <gpio_readPort+0x4a>
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	71 f4       	brne	.+28     	; 0xf02 <gpio_readPort+0x52>
    {
        case PORT_B:
        return_level = PINB;
     ee6:	e3 e2       	ldi	r30, 0x23	; 35
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <gpio_readPort+0x52>
        break;

        case PORT_C:
        return_level = PINC;
     ef0:	e6 e2       	ldi	r30, 0x26	; 38
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <gpio_readPort+0x52>
        break;

        case PORT_D:
        return_level = PIND;
     efa:	e9 e2       	ldi	r30, 0x29	; 41
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return return_level;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <gpio_setPinDirection>:

static void gpio_setPinDirection(port_t port, pin_t pin, pinDirection_t direction)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <gpio_setPinDirection+0x6>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <gpio_setPinDirection+0x8>
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	6a 83       	std	Y+2, r22	; 0x02
     f24:	4b 83       	std	Y+3, r20	; 0x03
    switch(port)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3d 83       	std	Y+5, r19	; 0x05
     f2e:	2c 83       	std	Y+4, r18	; 0x04
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <gpio_setPinDirection+0x96>
     f3a:	2c 81       	ldd	r18, Y+4	; 0x04
     f3c:	3d 81       	ldd	r19, Y+5	; 0x05
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <gpio_setPinDirection+0x34>
     f44:	5d c0       	rjmp	.+186    	; 0x1000 <gpio_setPinDirection+0xee>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	09 f0       	breq	.+2      	; 0xf50 <gpio_setPinDirection+0x3e>
     f4e:	83 c0       	rjmp	.+262    	; 0x1056 <gpio_setPinDirection+0x144>
    {
        case PORT_B:
        if (direction == PIN_OUTPUT)
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	a1 f4       	brne	.+40     	; 0xf7e <gpio_setPinDirection+0x6c>
        {
            SET_BIT(DDRB, pin);
     f56:	a4 e2       	ldi	r26, 0x24	; 36
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e4 e2       	ldi	r30, 0x24	; 36
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <gpio_setPinDirection+0x62>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <gpio_setPinDirection+0x5e>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	6c c0       	rjmp	.+216    	; 0x1056 <gpio_setPinDirection+0x144>
        }
        else
        {
            CLEAR_BIT(DDRB, pin);
     f7e:	a4 e2       	ldi	r26, 0x24	; 36
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 e2       	ldi	r30, 0x24	; 36
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <gpio_setPinDirection+0x8a>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <gpio_setPinDirection+0x86>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	57 c0       	rjmp	.+174    	; 0x1056 <gpio_setPinDirection+0x144>
        }
        break;

        case PORT_C:
        if (direction == PIN_OUTPUT)
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <gpio_setPinDirection+0xc4>
        {
            SET_BIT(DDRC, pin);
     fae:	a7 e2       	ldi	r26, 0x27	; 39
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e7 e2       	ldi	r30, 0x27	; 39
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <gpio_setPinDirection+0xba>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <gpio_setPinDirection+0xb6>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	40 c0       	rjmp	.+128    	; 0x1056 <gpio_setPinDirection+0x144>
        }
        else
        {
            CLEAR_BIT(DDRC, pin);
     fd6:	a7 e2       	ldi	r26, 0x27	; 39
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e7 e2       	ldi	r30, 0x27	; 39
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <gpio_setPinDirection+0xe2>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <gpio_setPinDirection+0xde>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	2b c0       	rjmp	.+86     	; 0x1056 <gpio_setPinDirection+0x144>
        }
        break;

        case PORT_D:
        if (direction == PIN_OUTPUT)
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	a1 f4       	brne	.+40     	; 0x102e <gpio_setPinDirection+0x11c>
        {
            SET_BIT(DDRD, pin);
    1006:	aa e2       	ldi	r26, 0x2A	; 42
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ea e2       	ldi	r30, 0x2A	; 42
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <gpio_setPinDirection+0x112>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <gpio_setPinDirection+0x10e>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <gpio_setPinDirection+0x144>
        }
        else
        {
            CLEAR_BIT(DDRD, pin);
    102e:	aa e2       	ldi	r26, 0x2A	; 42
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ea e2       	ldi	r30, 0x2A	; 42
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <gpio_setPinDirection+0x13a>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <gpio_setPinDirection+0x136>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
        }
        break;
    }
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <LCD_init>:
#include "lcd.h"
#include "gpio.h"
#include <util/delay.h>
#include <stdlib.h>

void LCD_init(void) {
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	c2 56       	subi	r28, 0x62	; 98
    1074:	d0 40       	sbci	r29, 0x00	; 0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	fe 01       	movw	r30, r28
    1082:	e1 5a       	subi	r30, 0xA1	; 161
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a8 ec       	ldi	r26, 0xC8	; 200
    108c:	b2 e4       	ldi	r27, 0x42	; 66
    108e:	80 83       	st	Z, r24
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	a2 83       	std	Z+2, r26	; 0x02
    1094:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1096:	8e 01       	movw	r16, r28
    1098:	05 5a       	subi	r16, 0xA5	; 165
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	fe 01       	movw	r30, r28
    109e:	e1 5a       	subi	r30, 0xA1	; 161
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4a e7       	ldi	r20, 0x7A	; 122
    10b0:	55 e4       	ldi	r21, 0x45	; 69
    10b2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	f8 01       	movw	r30, r16
    10bc:	80 83       	st	Z, r24
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	a2 83       	std	Z+2, r26	; 0x02
    10c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c4:	fe 01       	movw	r30, r28
    10c6:	e5 5a       	subi	r30, 0xA5	; 165
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e8       	ldi	r20, 0x80	; 128
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    10de:	88 23       	and	r24, r24
    10e0:	44 f4       	brge	.+16     	; 0x10f2 <LCD_init+0x8c>
		__ticks = 1;
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 5a       	subi	r30, 0xA7	; 167
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	64 c0       	rjmp	.+200    	; 0x11ba <LCD_init+0x154>
	else if (__tmp > 65535)
    10f2:	fe 01       	movw	r30, r28
    10f4:	e5 5a       	subi	r30, 0xA5	; 165
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	4f e7       	ldi	r20, 0x7F	; 127
    1106:	57 e4       	ldi	r21, 0x47	; 71
    1108:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    110c:	18 16       	cp	r1, r24
    110e:	0c f0       	brlt	.+2      	; 0x1112 <LCD_init+0xac>
    1110:	43 c0       	rjmp	.+134    	; 0x1198 <LCD_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1112:	fe 01       	movw	r30, r28
    1114:	e1 5a       	subi	r30, 0xA1	; 161
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8e 01       	movw	r16, r28
    1132:	07 5a       	subi	r16, 0xA7	; 167
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	1f c0       	rjmp	.+62     	; 0x1188 <LCD_init+0x122>
    114a:	fe 01       	movw	r30, r28
    114c:	e9 5a       	subi	r30, 0xA9	; 169
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 e9       	ldi	r24, 0x90	; 144
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1158:	fe 01       	movw	r30, r28
    115a:	e9 5a       	subi	r30, 0xA9	; 169
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <LCD_init+0xfc>
    1166:	fe 01       	movw	r30, r28
    1168:	e9 5a       	subi	r30, 0xA9	; 169
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	de 01       	movw	r26, r28
    1172:	a7 5a       	subi	r26, 0xA7	; 167
    1174:	bf 4f       	sbci	r27, 0xFF	; 255
    1176:	fe 01       	movw	r30, r28
    1178:	e7 5a       	subi	r30, 0xA7	; 167
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	11 96       	adiw	r26, 0x01	; 1
    1184:	9c 93       	st	X, r25
    1186:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	fe 01       	movw	r30, r28
    118a:	e7 5a       	subi	r30, 0xA7	; 167
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	d1 f6       	brne	.-76     	; 0x114a <LCD_init+0xe4>
    1196:	27 c0       	rjmp	.+78     	; 0x11e6 <LCD_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	8e 01       	movw	r16, r28
    119a:	07 5a       	subi	r16, 0xA7	; 167
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	fe 01       	movw	r30, r28
    11a0:	e5 5a       	subi	r30, 0xA5	; 165
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	f8 01       	movw	r30, r16
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
    11ba:	de 01       	movw	r26, r28
    11bc:	ab 5a       	subi	r26, 0xAB	; 171
    11be:	bf 4f       	sbci	r27, 0xFF	; 255
    11c0:	fe 01       	movw	r30, r28
    11c2:	e7 5a       	subi	r30, 0xA7	; 167
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	8d 93       	st	X+, r24
    11cc:	9c 93       	st	X, r25
    11ce:	fe 01       	movw	r30, r28
    11d0:	eb 5a       	subi	r30, 0xAB	; 171
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <LCD_init+0x172>
    11dc:	fe 01       	movw	r30, r28
    11de:	eb 5a       	subi	r30, 0xAB	; 171
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24

	/* Initialization according to datasheet */
	/* Wait for more than 100 ms after start up */
	_delay_ms(100);
	LCD_sendCommand(0x30);
    11e6:	80 e3       	ldi	r24, 0x30	; 48
    11e8:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
    11ec:	fe 01       	movw	r30, r28
    11ee:	ef 5a       	subi	r30, 0xAF	; 175
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 ea       	ldi	r26, 0xA0	; 160
    11f8:	b0 e4       	ldi	r27, 0x40	; 64
    11fa:	80 83       	st	Z, r24
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	a2 83       	std	Z+2, r26	; 0x02
    1200:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1202:	8e 01       	movw	r16, r28
    1204:	03 5b       	subi	r16, 0xB3	; 179
    1206:	1f 4f       	sbci	r17, 0xFF	; 255
    1208:	fe 01       	movw	r30, r28
    120a:	ef 5a       	subi	r30, 0xAF	; 175
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a e7       	ldi	r20, 0x7A	; 122
    121c:	55 e4       	ldi	r21, 0x45	; 69
    121e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	f8 01       	movw	r30, r16
    1228:	80 83       	st	Z, r24
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	a2 83       	std	Z+2, r26	; 0x02
    122e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1230:	fe 01       	movw	r30, r28
    1232:	e3 5b       	subi	r30, 0xB3	; 179
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    124a:	88 23       	and	r24, r24
    124c:	44 f4       	brge	.+16     	; 0x125e <LCD_init+0x1f8>
		__ticks = 1;
    124e:	fe 01       	movw	r30, r28
    1250:	e5 5b       	subi	r30, 0xB5	; 181
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
    125c:	64 c0       	rjmp	.+200    	; 0x1326 <LCD_init+0x2c0>
	else if (__tmp > 65535)
    125e:	fe 01       	movw	r30, r28
    1260:	e3 5b       	subi	r30, 0xB3	; 179
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	0c f0       	brlt	.+2      	; 0x127e <LCD_init+0x218>
    127c:	43 c0       	rjmp	.+134    	; 0x1304 <LCD_init+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127e:	fe 01       	movw	r30, r28
    1280:	ef 5a       	subi	r30, 0xAF	; 175
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8e 01       	movw	r16, r28
    129e:	05 5b       	subi	r16, 0xB5	; 181
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	f8 01       	movw	r30, r16
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
    12b4:	1f c0       	rjmp	.+62     	; 0x12f4 <LCD_init+0x28e>
    12b6:	fe 01       	movw	r30, r28
    12b8:	e7 5b       	subi	r30, 0xB7	; 183
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 e9       	ldi	r24, 0x90	; 144
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
    12c4:	fe 01       	movw	r30, r28
    12c6:	e7 5b       	subi	r30, 0xB7	; 183
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_init+0x268>
    12d2:	fe 01       	movw	r30, r28
    12d4:	e7 5b       	subi	r30, 0xB7	; 183
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	de 01       	movw	r26, r28
    12de:	a5 5b       	subi	r26, 0xB5	; 181
    12e0:	bf 4f       	sbci	r27, 0xFF	; 255
    12e2:	fe 01       	movw	r30, r28
    12e4:	e5 5b       	subi	r30, 0xB5	; 181
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	11 96       	adiw	r26, 0x01	; 1
    12f0:	9c 93       	st	X, r25
    12f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	fe 01       	movw	r30, r28
    12f6:	e5 5b       	subi	r30, 0xB5	; 181
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	d1 f6       	brne	.-76     	; 0x12b6 <LCD_init+0x250>
    1302:	27 c0       	rjmp	.+78     	; 0x1352 <LCD_init+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1304:	8e 01       	movw	r16, r28
    1306:	05 5b       	subi	r16, 0xB5	; 181
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	fe 01       	movw	r30, r28
    130c:	e3 5b       	subi	r30, 0xB3	; 179
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	f8 01       	movw	r30, r16
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
    1326:	de 01       	movw	r26, r28
    1328:	a9 5b       	subi	r26, 0xB9	; 185
    132a:	bf 4f       	sbci	r27, 0xFF	; 255
    132c:	fe 01       	movw	r30, r28
    132e:	e5 5b       	subi	r30, 0xB5	; 181
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	8d 93       	st	X+, r24
    1338:	9c 93       	st	X, r25
    133a:	fe 01       	movw	r30, r28
    133c:	e9 5b       	subi	r30, 0xB9	; 185
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_init+0x2de>
    1348:	fe 01       	movw	r30, r28
    134a:	e9 5b       	subi	r30, 0xB9	; 185
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
	/* Wait for more than 4.1 ms after SPECIAL FUNC SET */
	_delay_ms(5);
	LCD_sendCommand(0x30);
    1352:	80 e3       	ldi	r24, 0x30	; 48
    1354:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
    1358:	fe 01       	movw	r30, r28
    135a:	ed 5b       	subi	r30, 0xBD	; 189
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 e8       	ldi	r26, 0x80	; 128
    1364:	bf e3       	ldi	r27, 0x3F	; 63
    1366:	80 83       	st	Z, r24
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	a2 83       	std	Z+2, r26	; 0x02
    136c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	8e 01       	movw	r16, r28
    1370:	01 5c       	subi	r16, 0xC1	; 193
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	fe 01       	movw	r30, r28
    1376:	ed 5b       	subi	r30, 0xBD	; 189
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	4a e7       	ldi	r20, 0x7A	; 122
    1388:	55 e4       	ldi	r21, 0x45	; 69
    138a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	f8 01       	movw	r30, r16
    1394:	80 83       	st	Z, r24
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	a2 83       	std	Z+2, r26	; 0x02
    139a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    139c:	fe 01       	movw	r30, r28
    139e:	ff 96       	adiw	r30, 0x3f	; 63
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <LCD_init+0x35c>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9e af       	std	Y+62, r25	; 0x3e
    13be:	8d af       	std	Y+61, r24	; 0x3d
    13c0:	46 c0       	rjmp	.+140    	; 0x144e <LCD_init+0x3e8>
	else if (__tmp > 65535)
    13c2:	fe 01       	movw	r30, r28
    13c4:	ff 96       	adiw	r30, 0x3f	; 63
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3f ef       	ldi	r19, 0xFF	; 255
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	57 e4       	ldi	r21, 0x47	; 71
    13d6:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	64 f5       	brge	.+88     	; 0x1436 <LCD_init+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13de:	fe 01       	movw	r30, r28
    13e0:	ed 5b       	subi	r30, 0xBD	; 189
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9e af       	std	Y+62, r25	; 0x3e
    140a:	8d af       	std	Y+61, r24	; 0x3d
    140c:	0f c0       	rjmp	.+30     	; 0x142c <LCD_init+0x3c6>
    140e:	80 e9       	ldi	r24, 0x90	; 144
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	9c af       	std	Y+60, r25	; 0x3c
    1414:	8b af       	std	Y+59, r24	; 0x3b
    1416:	8b ad       	ldd	r24, Y+59	; 0x3b
    1418:	9c ad       	ldd	r25, Y+60	; 0x3c
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <LCD_init+0x3b4>
    141e:	9c af       	std	Y+60, r25	; 0x3c
    1420:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8d ad       	ldd	r24, Y+61	; 0x3d
    1424:	9e ad       	ldd	r25, Y+62	; 0x3e
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9e af       	std	Y+62, r25	; 0x3e
    142a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8d ad       	ldd	r24, Y+61	; 0x3d
    142e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <LCD_init+0x3a8>
    1434:	16 c0       	rjmp	.+44     	; 0x1462 <LCD_init+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	fe 01       	movw	r30, r28
    1438:	ff 96       	adiw	r30, 0x3f	; 63
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9e af       	std	Y+62, r25	; 0x3e
    144c:	8d af       	std	Y+61, r24	; 0x3d
    144e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1450:	9e ad       	ldd	r25, Y+62	; 0x3e
    1452:	9a af       	std	Y+58, r25	; 0x3a
    1454:	89 af       	std	Y+57, r24	; 0x39
    1456:	89 ad       	ldd	r24, Y+57	; 0x39
    1458:	9a ad       	ldd	r25, Y+58	; 0x3a
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_init+0x3f4>
    145e:	9a af       	std	Y+58, r25	; 0x3a
    1460:	89 af       	std	Y+57, r24	; 0x39
	/* Wait for more than 100 us after SPECIAL FUNC SET */
	_delay_ms(1);
	LCD_sendCommand(0x30);
    1462:	80 e3       	ldi	r24, 0x30	; 48
    1464:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 e8       	ldi	r26, 0x80	; 128
    146e:	bf e3       	ldi	r27, 0x3F	; 63
    1470:	8d ab       	std	Y+53, r24	; 0x35
    1472:	9e ab       	std	Y+54, r25	; 0x36
    1474:	af ab       	std	Y+55, r26	; 0x37
    1476:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1478:	6d a9       	ldd	r22, Y+53	; 0x35
    147a:	7e a9       	ldd	r23, Y+54	; 0x36
    147c:	8f a9       	ldd	r24, Y+55	; 0x37
    147e:	98 ad       	ldd	r25, Y+56	; 0x38
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	4a e7       	ldi	r20, 0x7A	; 122
    1486:	55 e4       	ldi	r21, 0x45	; 69
    1488:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	89 ab       	std	Y+49, r24	; 0x31
    1492:	9a ab       	std	Y+50, r25	; 0x32
    1494:	ab ab       	std	Y+51, r26	; 0x33
    1496:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1498:	69 a9       	ldd	r22, Y+49	; 0x31
    149a:	7a a9       	ldd	r23, Y+50	; 0x32
    149c:	8b a9       	ldd	r24, Y+51	; 0x33
    149e:	9c a9       	ldd	r25, Y+52	; 0x34
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	2c f4       	brge	.+10     	; 0x14ba <LCD_init+0x454>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	98 ab       	std	Y+48, r25	; 0x30
    14b6:	8f a7       	std	Y+47, r24	; 0x2f
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <LCD_init+0x4d2>
	else if (__tmp > 65535)
    14ba:	69 a9       	ldd	r22, Y+49	; 0x31
    14bc:	7a a9       	ldd	r23, Y+50	; 0x32
    14be:	8b a9       	ldd	r24, Y+51	; 0x33
    14c0:	9c a9       	ldd	r25, Y+52	; 0x34
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4f e7       	ldi	r20, 0x7F	; 127
    14c8:	57 e4       	ldi	r21, 0x47	; 71
    14ca:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	4c f5       	brge	.+82     	; 0x1524 <LCD_init+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d2:	6d a9       	ldd	r22, Y+53	; 0x35
    14d4:	7e a9       	ldd	r23, Y+54	; 0x36
    14d6:	8f a9       	ldd	r24, Y+55	; 0x37
    14d8:	98 ad       	ldd	r25, Y+56	; 0x38
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e2       	ldi	r20, 0x20	; 32
    14e0:	51 e4       	ldi	r21, 0x41	; 65
    14e2:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	98 ab       	std	Y+48, r25	; 0x30
    14f8:	8f a7       	std	Y+47, r24	; 0x2f
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <LCD_init+0x4b4>
    14fc:	80 e9       	ldi	r24, 0x90	; 144
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	9e a7       	std	Y+46, r25	; 0x2e
    1502:	8d a7       	std	Y+45, r24	; 0x2d
    1504:	8d a5       	ldd	r24, Y+45	; 0x2d
    1506:	9e a5       	ldd	r25, Y+46	; 0x2e
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <LCD_init+0x4a2>
    150c:	9e a7       	std	Y+46, r25	; 0x2e
    150e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	8f a5       	ldd	r24, Y+47	; 0x2f
    1512:	98 a9       	ldd	r25, Y+48	; 0x30
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	98 ab       	std	Y+48, r25	; 0x30
    1518:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151a:	8f a5       	ldd	r24, Y+47	; 0x2f
    151c:	98 a9       	ldd	r25, Y+48	; 0x30
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	69 f7       	brne	.-38     	; 0x14fc <LCD_init+0x496>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <LCD_init+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	69 a9       	ldd	r22, Y+49	; 0x31
    1526:	7a a9       	ldd	r23, Y+50	; 0x32
    1528:	8b a9       	ldd	r24, Y+51	; 0x33
    152a:	9c a9       	ldd	r25, Y+52	; 0x34
    152c:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	98 ab       	std	Y+48, r25	; 0x30
    1536:	8f a7       	std	Y+47, r24	; 0x2f
    1538:	8f a5       	ldd	r24, Y+47	; 0x2f
    153a:	98 a9       	ldd	r25, Y+48	; 0x30
    153c:	9c a7       	std	Y+44, r25	; 0x2c
    153e:	8b a7       	std	Y+43, r24	; 0x2b
    1540:	8b a5       	ldd	r24, Y+43	; 0x2b
    1542:	9c a5       	ldd	r25, Y+44	; 0x2c
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_init+0x4de>
    1548:	9c a7       	std	Y+44, r25	; 0x2c
    154a:	8b a7       	std	Y+43, r24	; 0x2b
	/* Wait for more than 100 us after SPECIAL FUNC SET */
	_delay_ms(1);

	/* 1.Func set (the real one) */
	LCD_sendCommand(LCD_8BIT_2LINE_5x8_MODE);
    154c:	88 e3       	ldi	r24, 0x38	; 56
    154e:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e8       	ldi	r26, 0x80	; 128
    1558:	bf e3       	ldi	r27, 0x3F	; 63
    155a:	8f a3       	std	Y+39, r24	; 0x27
    155c:	98 a7       	std	Y+40, r25	; 0x28
    155e:	a9 a7       	std	Y+41, r26	; 0x29
    1560:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	6f a1       	ldd	r22, Y+39	; 0x27
    1564:	78 a5       	ldd	r23, Y+40	; 0x28
    1566:	89 a5       	ldd	r24, Y+41	; 0x29
    1568:	9a a5       	ldd	r25, Y+42	; 0x2a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a e7       	ldi	r20, 0x7A	; 122
    1570:	55 e4       	ldi	r21, 0x45	; 69
    1572:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8b a3       	std	Y+35, r24	; 0x23
    157c:	9c a3       	std	Y+36, r25	; 0x24
    157e:	ad a3       	std	Y+37, r26	; 0x25
    1580:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1582:	6b a1       	ldd	r22, Y+35	; 0x23
    1584:	7c a1       	ldd	r23, Y+36	; 0x24
    1586:	8d a1       	ldd	r24, Y+37	; 0x25
    1588:	9e a1       	ldd	r25, Y+38	; 0x26
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <LCD_init+0x53e>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9a a3       	std	Y+34, r25	; 0x22
    15a0:	89 a3       	std	Y+33, r24	; 0x21
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <LCD_init+0x5bc>
	else if (__tmp > 65535)
    15a4:	6b a1       	ldd	r22, Y+35	; 0x23
    15a6:	7c a1       	ldd	r23, Y+36	; 0x24
    15a8:	8d a1       	ldd	r24, Y+37	; 0x25
    15aa:	9e a1       	ldd	r25, Y+38	; 0x26
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <LCD_init+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	6f a1       	ldd	r22, Y+39	; 0x27
    15be:	78 a5       	ldd	r23, Y+40	; 0x28
    15c0:	89 a5       	ldd	r24, Y+41	; 0x29
    15c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9a a3       	std	Y+34, r25	; 0x22
    15e2:	89 a3       	std	Y+33, r24	; 0x21
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <LCD_init+0x59e>
    15e6:	80 e9       	ldi	r24, 0x90	; 144
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	98 a3       	std	Y+32, r25	; 0x20
    15ec:	8f 8f       	std	Y+31, r24	; 0x1f
    15ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15f0:	98 a1       	ldd	r25, Y+32	; 0x20
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_init+0x58c>
    15f6:	98 a3       	std	Y+32, r25	; 0x20
    15f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	89 a1       	ldd	r24, Y+33	; 0x21
    15fc:	9a a1       	ldd	r25, Y+34	; 0x22
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9a a3       	std	Y+34, r25	; 0x22
    1602:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	89 a1       	ldd	r24, Y+33	; 0x21
    1606:	9a a1       	ldd	r25, Y+34	; 0x22
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <LCD_init+0x580>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <LCD_init+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6b a1       	ldd	r22, Y+35	; 0x23
    1610:	7c a1       	ldd	r23, Y+36	; 0x24
    1612:	8d a1       	ldd	r24, Y+37	; 0x25
    1614:	9e a1       	ldd	r25, Y+38	; 0x26
    1616:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9a a3       	std	Y+34, r25	; 0x22
    1620:	89 a3       	std	Y+33, r24	; 0x21
    1622:	89 a1       	ldd	r24, Y+33	; 0x21
    1624:	9a a1       	ldd	r25, Y+34	; 0x22
    1626:	9e 8f       	std	Y+30, r25	; 0x1e
    1628:	8d 8f       	std	Y+29, r24	; 0x1d
    162a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_init+0x5c8>
    1632:	9e 8f       	std	Y+30, r25	; 0x1e
    1634:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Wait for more than 53 us or util Busy flag is clear */
	_delay_ms(1);

	/* 2.Display off */
	LCD_sendCommand(LCD_DISPLAY_ON);
    1636:	8c e0       	ldi	r24, 0x0C	; 12
    1638:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e8       	ldi	r26, 0x80	; 128
    1642:	bf e3       	ldi	r27, 0x3F	; 63
    1644:	89 8f       	std	Y+25, r24	; 0x19
    1646:	9a 8f       	std	Y+26, r25	; 0x1a
    1648:	ab 8f       	std	Y+27, r26	; 0x1b
    164a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	69 8d       	ldd	r22, Y+25	; 0x19
    164e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a e7       	ldi	r20, 0x7A	; 122
    165a:	55 e4       	ldi	r21, 0x45	; 69
    165c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8d 8b       	std	Y+21, r24	; 0x15
    1666:	9e 8b       	std	Y+22, r25	; 0x16
    1668:	af 8b       	std	Y+23, r26	; 0x17
    166a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    166c:	6d 89       	ldd	r22, Y+21	; 0x15
    166e:	7e 89       	ldd	r23, Y+22	; 0x16
    1670:	8f 89       	ldd	r24, Y+23	; 0x17
    1672:	98 8d       	ldd	r25, Y+24	; 0x18
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_init+0x628>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9c 8b       	std	Y+20, r25	; 0x14
    168a:	8b 8b       	std	Y+19, r24	; 0x13
    168c:	3f c0       	rjmp	.+126    	; 0x170c <LCD_init+0x6a6>
	else if (__tmp > 65535)
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <LCD_init+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	69 8d       	ldd	r22, Y+25	; 0x19
    16a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9c 8b       	std	Y+20, r25	; 0x14
    16cc:	8b 8b       	std	Y+19, r24	; 0x13
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <LCD_init+0x688>
    16d0:	80 e9       	ldi	r24, 0x90	; 144
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	9a 8b       	std	Y+18, r25	; 0x12
    16d6:	89 8b       	std	Y+17, r24	; 0x11
    16d8:	89 89       	ldd	r24, Y+17	; 0x11
    16da:	9a 89       	ldd	r25, Y+18	; 0x12
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_init+0x676>
    16e0:	9a 8b       	std	Y+18, r25	; 0x12
    16e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	9c 89       	ldd	r25, Y+20	; 0x14
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9c 8b       	std	Y+20, r25	; 0x14
    16ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8b 89       	ldd	r24, Y+19	; 0x13
    16f0:	9c 89       	ldd	r25, Y+20	; 0x14
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <LCD_init+0x66a>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <LCD_init+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6d 89       	ldd	r22, Y+21	; 0x15
    16fa:	7e 89       	ldd	r23, Y+22	; 0x16
    16fc:	8f 89       	ldd	r24, Y+23	; 0x17
    16fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1700:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	98 8b       	std	Y+16, r25	; 0x10
    1712:	8f 87       	std	Y+15, r24	; 0x0f
    1714:	8f 85       	ldd	r24, Y+15	; 0x0f
    1716:	98 89       	ldd	r25, Y+16	; 0x10
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_init+0x6b2>
    171c:	98 8b       	std	Y+16, r25	; 0x10
    171e:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for more than 53 us or util Busy flag is clear */
	_delay_ms(1);

	/* 3.Display clear */
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 ea       	ldi	r26, 0xA0	; 160
    172c:	b0 e4       	ldi	r27, 0x40	; 64
    172e:	8b 87       	std	Y+11, r24	; 0x0b
    1730:	9c 87       	std	Y+12, r25	; 0x0c
    1732:	ad 87       	std	Y+13, r26	; 0x0d
    1734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1736:	6b 85       	ldd	r22, Y+11	; 0x0b
    1738:	7c 85       	ldd	r23, Y+12	; 0x0c
    173a:	8d 85       	ldd	r24, Y+13	; 0x0d
    173c:	9e 85       	ldd	r25, Y+14	; 0x0e
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a e7       	ldi	r20, 0x7A	; 122
    1744:	55 e4       	ldi	r21, 0x45	; 69
    1746:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	8f 83       	std	Y+7, r24	; 0x07
    1750:	98 87       	std	Y+8, r25	; 0x08
    1752:	a9 87       	std	Y+9, r26	; 0x09
    1754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1756:	6f 81       	ldd	r22, Y+7	; 0x07
    1758:	78 85       	ldd	r23, Y+8	; 0x08
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    176a:	88 23       	and	r24, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <LCD_init+0x712>
		__ticks = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <LCD_init+0x790>
	else if (__tmp > 65535)
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	4c f5       	brge	.+82     	; 0x17e2 <LCD_init+0x77c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <LCD_init+0x772>
    17ba:	80 e9       	ldi	r24, 0x90	; 144
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <LCD_init+0x760>
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	69 f7       	brne	.-38     	; 0x17ba <LCD_init+0x754>
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <LCD_init+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_init+0x79c>
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
//	/* 4.Entry mode */
//	LCD_sendCommand(0x05);
	/* Wait for more than 53 us or util Busy flag is clear */
//	_delay_us(60);
//	LCD_sendCommand(LCD_SET_DDRAM_ADRESS | 0x40);
}
    180a:	ce 59       	subi	r28, 0x9E	; 158
    180c:	df 4f       	sbci	r29, 0xFF	; 255
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command) {
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	e9 97       	sbiw	r28, 0x39	; 57
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	89 af       	std	Y+57, r24	; 0x39

	gpio_writeChannel(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
	gpio_writeChannel(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e8       	ldi	r26, 0x80	; 128
    1852:	bf e3       	ldi	r27, 0x3F	; 63
    1854:	8d ab       	std	Y+53, r24	; 0x35
    1856:	9e ab       	std	Y+54, r25	; 0x36
    1858:	af ab       	std	Y+55, r26	; 0x37
    185a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6d a9       	ldd	r22, Y+53	; 0x35
    185e:	7e a9       	ldd	r23, Y+54	; 0x36
    1860:	8f a9       	ldd	r24, Y+55	; 0x37
    1862:	98 ad       	ldd	r25, Y+56	; 0x38
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a e7       	ldi	r20, 0x7A	; 122
    186a:	55 e4       	ldi	r21, 0x45	; 69
    186c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	89 ab       	std	Y+49, r24	; 0x31
    1876:	9a ab       	std	Y+50, r25	; 0x32
    1878:	ab ab       	std	Y+51, r26	; 0x33
    187a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_sendCommand+0x7c>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6d a9       	ldd	r22, Y+53	; 0x35
    18b8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ba:	8f a9       	ldd	r24, Y+55	; 0x37
    18bc:	98 ad       	ldd	r25, Y+56	; 0x38
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_sendCommand+0xdc>
    18e0:	80 e9       	ldi	r24, 0x90	; 144
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	9e a7       	std	Y+46, r25	; 0x2e
    18e6:	8d a7       	std	Y+45, r24	; 0x2d
    18e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0xca>
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	98 a9       	ldd	r25, Y+48	; 0x30
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	98 ab       	std	Y+48, r25	; 0x30
    18fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1900:	98 a9       	ldd	r25, Y+48	; 0x30
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_sendCommand+0xbe>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	9c a7       	std	Y+44, r25	; 0x2c
    1922:	8b a7       	std	Y+43, r24	; 0x2b
    1924:	8b a5       	ldd	r24, Y+43	; 0x2b
    1926:	9c a5       	ldd	r25, Y+44	; 0x2c
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_sendCommand+0x106>
    192c:	9c a7       	std	Y+44, r25	; 0x2c
    192e:	8b a7       	std	Y+43, r24	; 0x2b
	/* Tas processing delay (50 ns) */
	_delay_ms(1);

	gpio_writeChannel(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e8       	ldi	r26, 0x80	; 128
    1940:	bf e3       	ldi	r27, 0x3F	; 63
    1942:	8f a3       	std	Y+39, r24	; 0x27
    1944:	98 a7       	std	Y+40, r25	; 0x28
    1946:	a9 a7       	std	Y+41, r26	; 0x29
    1948:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6f a1       	ldd	r22, Y+39	; 0x27
    194c:	78 a5       	ldd	r23, Y+40	; 0x28
    194e:	89 a5       	ldd	r24, Y+41	; 0x29
    1950:	9a a5       	ldd	r25, Y+42	; 0x2a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a e7       	ldi	r20, 0x7A	; 122
    1958:	55 e4       	ldi	r21, 0x45	; 69
    195a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8b a3       	std	Y+35, r24	; 0x23
    1964:	9c a3       	std	Y+36, r25	; 0x24
    1966:	ad a3       	std	Y+37, r26	; 0x25
    1968:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    196a:	6b a1       	ldd	r22, Y+35	; 0x23
    196c:	7c a1       	ldd	r23, Y+36	; 0x24
    196e:	8d a1       	ldd	r24, Y+37	; 0x25
    1970:	9e a1       	ldd	r25, Y+38	; 0x26
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <LCD_sendCommand+0x16a>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    198c:	6b a1       	ldd	r22, Y+35	; 0x23
    198e:	7c a1       	ldd	r23, Y+36	; 0x24
    1990:	8d a1       	ldd	r24, Y+37	; 0x25
    1992:	9e a1       	ldd	r25, Y+38	; 0x26
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6f a1       	ldd	r22, Y+39	; 0x27
    19a6:	78 a5       	ldd	r23, Y+40	; 0x28
    19a8:	89 a5       	ldd	r24, Y+41	; 0x29
    19aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9a a3       	std	Y+34, r25	; 0x22
    19ca:	89 a3       	std	Y+33, r24	; 0x21
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <LCD_sendCommand+0x1ca>
    19ce:	80 e9       	ldi	r24, 0x90	; 144
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	98 a3       	std	Y+32, r25	; 0x20
    19d4:	8f 8f       	std	Y+31, r24	; 0x1f
    19d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d8:	98 a1       	ldd	r25, Y+32	; 0x20
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_sendCommand+0x1b8>
    19de:	98 a3       	std	Y+32, r25	; 0x20
    19e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	89 a1       	ldd	r24, Y+33	; 0x21
    19e4:	9a a1       	ldd	r25, Y+34	; 0x22
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9a a3       	std	Y+34, r25	; 0x22
    19ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	89 a1       	ldd	r24, Y+33	; 0x21
    19ee:	9a a1       	ldd	r25, Y+34	; 0x22
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <LCD_sendCommand+0x1ac>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6b a1       	ldd	r22, Y+35	; 0x23
    19f8:	7c a1       	ldd	r23, Y+36	; 0x24
    19fa:	8d a1       	ldd	r24, Y+37	; 0x25
    19fc:	9e a1       	ldd	r25, Y+38	; 0x26
    19fe:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9a a3       	std	Y+34, r25	; 0x22
    1a08:	89 a3       	std	Y+33, r24	; 0x21
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a10:	8d 8f       	std	Y+29, r24	; 0x1d
    1a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_sendCommand+0x1f4>
    1a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Tpw - Tdsw processing delay (190 ns) */
	_delay_ms(1);

	gpio_writePort(LCD_DATA, command);
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	69 ad       	ldd	r22, Y+57	; 0x39
    1a22:	0e 94 28 07 	call	0xe50	; 0xe50 <gpio_writePort>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a0 e8       	ldi	r26, 0x80	; 128
    1a2c:	bf e3       	ldi	r27, 0x3F	; 63
    1a2e:	89 8f       	std	Y+25, r24	; 0x19
    1a30:	9a 8f       	std	Y+26, r25	; 0x1a
    1a32:	ab 8f       	std	Y+27, r26	; 0x1b
    1a34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	69 8d       	ldd	r22, Y+25	; 0x19
    1a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	4a e7       	ldi	r20, 0x7A	; 122
    1a44:	55 e4       	ldi	r21, 0x45	; 69
    1a46:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8d 8b       	std	Y+21, r24	; 0x15
    1a50:	9e 8b       	std	Y+22, r25	; 0x16
    1a52:	af 8b       	std	Y+23, r26	; 0x17
    1a54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a56:	6d 89       	ldd	r22, Y+21	; 0x15
    1a58:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <LCD_sendCommand+0x256>
		__ticks = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9c 8b       	std	Y+20, r25	; 0x14
    1a74:	8b 8b       	std	Y+19, r24	; 0x13
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1a78:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	4c f5       	brge	.+82     	; 0x1ae2 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	69 8d       	ldd	r22, Y+25	; 0x19
    1a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9c 8b       	std	Y+20, r25	; 0x14
    1ab6:	8b 8b       	std	Y+19, r24	; 0x13
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <LCD_sendCommand+0x2b6>
    1aba:	80 e9       	ldi	r24, 0x90	; 144
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
    1ac2:	89 89       	ldd	r24, Y+17	; 0x11
    1ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <LCD_sendCommand+0x2a4>
    1aca:	9a 8b       	std	Y+18, r25	; 0x12
    1acc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9c 8b       	std	Y+20, r25	; 0x14
    1ad6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ada:	9c 89       	ldd	r25, Y+20	; 0x14
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f7       	brne	.-38     	; 0x1aba <LCD_sendCommand+0x298>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aea:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	98 8b       	std	Y+16, r25	; 0x10
    1afc:	8f 87       	std	Y+15, r24	; 0x0f
    1afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b00:	98 89       	ldd	r25, Y+16	; 0x10
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_sendCommand+0x2e0>
    1b06:	98 8b       	std	Y+16, r25	; 0x10
    1b08:	8f 87       	std	Y+15, r24	; 0x0f
	/* Tdsw processing delay (100 ns) */
	_delay_ms(1);

	gpio_writeChannel(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a0 e8       	ldi	r26, 0x80	; 128
    1b1a:	bf e3       	ldi	r27, 0x3F	; 63
    1b1c:	8b 87       	std	Y+11, r24	; 0x0b
    1b1e:	9c 87       	std	Y+12, r25	; 0x0c
    1b20:	ad 87       	std	Y+13, r26	; 0x0d
    1b22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a e7       	ldi	r20, 0x7A	; 122
    1b32:	55 e4       	ldi	r21, 0x45	; 69
    1b34:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8f 83       	std	Y+7, r24	; 0x07
    1b3e:	98 87       	std	Y+8, r25	; 0x08
    1b40:	a9 87       	std	Y+9, r26	; 0x09
    1b42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b44:	6f 81       	ldd	r22, Y+7	; 0x07
    1b46:	78 85       	ldd	r23, Y+8	; 0x08
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <LCD_sendCommand+0x344>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	3f c0       	rjmp	.+126    	; 0x1be4 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <LCD_sendCommand+0x3a4>
    1ba8:	80 e9       	ldi	r24, 0x90	; 144
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_sendCommand+0x392>
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <LCD_sendCommand+0x386>
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_sendCommand+0x3ce>
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
	/* Ts processing delay (13 ns) */
	_delay_ms(1);
}
    1bf8:	e9 96       	adiw	r28, 0x39	; 57
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data) {
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	e9 97       	sbiw	r28, 0x39	; 57
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	89 af       	std	Y+57, r24	; 0x39

	gpio_writeChannel(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	62 e0       	ldi	r22, 0x02	; 2
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
	gpio_writeChannel(LCD_RW_PORT, LCD_RW_PIN, LOGIC_LOW);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e8       	ldi	r26, 0x80	; 128
    1c3a:	bf e3       	ldi	r27, 0x3F	; 63
    1c3c:	8d ab       	std	Y+53, r24	; 0x35
    1c3e:	9e ab       	std	Y+54, r25	; 0x36
    1c40:	af ab       	std	Y+55, r26	; 0x37
    1c42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	6d a9       	ldd	r22, Y+53	; 0x35
    1c46:	7e a9       	ldd	r23, Y+54	; 0x36
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a e7       	ldi	r20, 0x7A	; 122
    1c52:	55 e4       	ldi	r21, 0x45	; 69
    1c54:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	89 ab       	std	Y+49, r24	; 0x31
    1c5e:	9a ab       	std	Y+50, r25	; 0x32
    1c60:	ab ab       	std	Y+51, r26	; 0x33
    1c62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c64:	69 a9       	ldd	r22, Y+49	; 0x31
    1c66:	7a a9       	ldd	r23, Y+50	; 0x32
    1c68:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	98 ab       	std	Y+48, r25	; 0x30
    1c82:	8f a7       	std	Y+47, r24	; 0x2f
    1c84:	3f c0       	rjmp	.+126    	; 0x1d04 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1c86:	69 a9       	ldd	r22, Y+49	; 0x31
    1c88:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	4c f5       	brge	.+82     	; 0x1cf0 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <LCD_displayCharacter+0xdc>
    1cc8:	80 e9       	ldi	r24, 0x90	; 144
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	9e a7       	std	Y+46, r25	; 0x2e
    1cce:	8d a7       	std	Y+45, r24	; 0x2d
    1cd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_displayCharacter+0xca>
    1cd8:	9e a7       	std	Y+46, r25	; 0x2e
    1cda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cde:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	98 ab       	std	Y+48, r25	; 0x30
    1ce4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <LCD_displayCharacter+0xbe>
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
    1d04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d06:	98 a9       	ldd	r25, Y+48	; 0x30
    1d08:	9c a7       	std	Y+44, r25	; 0x2c
    1d0a:	8b a7       	std	Y+43, r24	; 0x2b
    1d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_displayCharacter+0x106>
    1d14:	9c a7       	std	Y+44, r25	; 0x2c
    1d16:	8b a7       	std	Y+43, r24	; 0x2b
	/* Tas processing delay (50 ns) */
	_delay_ms(1);

	gpio_writeChannel(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e8       	ldi	r26, 0x80	; 128
    1d28:	bf e3       	ldi	r27, 0x3F	; 63
    1d2a:	8f a3       	std	Y+39, r24	; 0x27
    1d2c:	98 a7       	std	Y+40, r25	; 0x28
    1d2e:	a9 a7       	std	Y+41, r26	; 0x29
    1d30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	6f a1       	ldd	r22, Y+39	; 0x27
    1d34:	78 a5       	ldd	r23, Y+40	; 0x28
    1d36:	89 a5       	ldd	r24, Y+41	; 0x29
    1d38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a e7       	ldi	r20, 0x7A	; 122
    1d40:	55 e4       	ldi	r21, 0x45	; 69
    1d42:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8b a3       	std	Y+35, r24	; 0x23
    1d4c:	9c a3       	std	Y+36, r25	; 0x24
    1d4e:	ad a3       	std	Y+37, r26	; 0x25
    1d50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d52:	6b a1       	ldd	r22, Y+35	; 0x23
    1d54:	7c a1       	ldd	r23, Y+36	; 0x24
    1d56:	8d a1       	ldd	r24, Y+37	; 0x25
    1d58:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9a a3       	std	Y+34, r25	; 0x22
    1d70:	89 a3       	std	Y+33, r24	; 0x21
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1d74:	6b a1       	ldd	r22, Y+35	; 0x23
    1d76:	7c a1       	ldd	r23, Y+36	; 0x24
    1d78:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d90:	89 a5       	ldd	r24, Y+41	; 0x29
    1d92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <LCD_displayCharacter+0x1ca>
    1db6:	80 e9       	ldi	r24, 0x90	; 144
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	98 a3       	std	Y+32, r25	; 0x20
    1dbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1dbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <LCD_displayCharacter+0x1b8>
    1dc6:	98 a3       	std	Y+32, r25	; 0x20
    1dc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	89 a1       	ldd	r24, Y+33	; 0x21
    1dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9a a3       	std	Y+34, r25	; 0x22
    1dd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <LCD_displayCharacter+0x1ac>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6b a1       	ldd	r22, Y+35	; 0x23
    1de0:	7c a1       	ldd	r23, Y+36	; 0x24
    1de2:	8d a1       	ldd	r24, Y+37	; 0x25
    1de4:	9e a1       	ldd	r25, Y+38	; 0x26
    1de6:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9a a3       	std	Y+34, r25	; 0x22
    1df0:	89 a3       	std	Y+33, r24	; 0x21
    1df2:	89 a1       	ldd	r24, Y+33	; 0x21
    1df4:	9a a1       	ldd	r25, Y+34	; 0x22
    1df6:	9e 8f       	std	Y+30, r25	; 0x1e
    1df8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_displayCharacter+0x1f4>
    1e02:	9e 8f       	std	Y+30, r25	; 0x1e
    1e04:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Tpw - Tdsw processing delay (190 ns) */
	_delay_ms(1);

	gpio_writePort(LCD_DATA, data);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	69 ad       	ldd	r22, Y+57	; 0x39
    1e0a:	0e 94 28 07 	call	0xe50	; 0xe50 <gpio_writePort>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	89 8f       	std	Y+25, r24	; 0x19
    1e18:	9a 8f       	std	Y+26, r25	; 0x1a
    1e1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a e7       	ldi	r20, 0x7A	; 122
    1e2c:	55 e4       	ldi	r21, 0x45	; 69
    1e2e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8d 8b       	std	Y+21, r24	; 0x15
    1e38:	9e 8b       	std	Y+22, r25	; 0x16
    1e3a:	af 8b       	std	Y+23, r26	; 0x17
    1e3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1e60:	6d 89       	ldd	r22, Y+21	; 0x15
    1e62:	7e 89       	ldd	r23, Y+22	; 0x16
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <LCD_displayCharacter+0x2b6>
    1ea2:	80 e9       	ldi	r24, 0x90	; 144
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	9a 8b       	std	Y+18, r25	; 0x12
    1ea8:	89 8b       	std	Y+17, r24	; 0x11
    1eaa:	89 89       	ldd	r24, Y+17	; 0x11
    1eac:	9a 89       	ldd	r25, Y+18	; 0x12
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_displayCharacter+0x2a4>
    1eb2:	9a 8b       	std	Y+18, r25	; 0x12
    1eb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <LCD_displayCharacter+0x298>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee2:	98 8b       	std	Y+16, r25	; 0x10
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	98 89       	ldd	r25, Y+16	; 0x10
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_displayCharacter+0x2e0>
    1eee:	98 8b       	std	Y+16, r25	; 0x10
    1ef0:	8f 87       	std	Y+15, r24	; 0x0f
	/* Tdsw processing delay (100 ns) */
	_delay_ms(1);

	gpio_writeChannel(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <gpio_writeChannel>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	8b 87       	std	Y+11, r24	; 0x0b
    1f06:	9c 87       	std	Y+12, r25	; 0x0c
    1f08:	ad 87       	std	Y+13, r26	; 0x0d
    1f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a e7       	ldi	r20, 0x7A	; 122
    1f1a:	55 e4       	ldi	r21, 0x45	; 69
    1f1c:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8f 83       	std	Y+7, r24	; 0x07
    1f26:	98 87       	std	Y+8, r25	; 0x08
    1f28:	a9 87       	std	Y+9, r26	; 0x09
    1f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_displayCharacter+0x344>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 1b 03 	call	0x636	; 0x636 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_displayCharacter+0x3a4>
    1f90:	80 e9       	ldi	r24, 0x90	; 144
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_displayCharacter+0x392>
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_displayCharacter+0x386>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	0e 94 4b 00 	call	0x96	; 0x96 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_displayCharacter+0x3ce>
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
	/* Ts processing delay (13 ns) */
	_delay_ms(1);
}
    1fe0:	e9 96       	adiw	r28, 0x39	; 57
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <LCD_displayString>:

void LCD_displayString(const char *str) {
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <LCD_displayString+0x6>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9b 83       	std	Y+3, r25	; 0x03
    2000:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2002:	19 82       	std	Y+1, r1	; 0x01
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <LCD_displayString+0x30>
	while (*(str + i) != '\0') {
		LCD_displayCharacter(*(str + i));
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	fc 01       	movw	r30, r24
    2012:	e2 0f       	add	r30, r18
    2014:	f3 1f       	adc	r31, r19
    2016:	80 81       	ld	r24, Z
    2018:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <LCD_displayCharacter>
		i++;
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void LCD_displayString(const char *str) {
	uint8 i = 0;
	while (*(str + i) != '\0') {
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	fc 01       	movw	r30, r24
    202e:	e2 0f       	add	r30, r18
    2030:	f3 1f       	adc	r31, r19
    2032:	80 81       	ld	r24, Z
    2034:	88 23       	and	r24, r24
    2036:	39 f7       	brne	.-50     	; 0x2006 <LCD_displayString+0x14>
		LCD_displayCharacter(*(str + i));
		i++;
	}
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col) {
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <LCD_moveCursor+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <LCD_moveCursor+0x8>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address_counter = 0;
    2056:	19 82       	std	Y+1, r1	; 0x01

	/* Guard from invalid inputs */
	/* print error message and exit function */
	if (row > 3 || col > 39) {
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	18 f4       	brcc	.+6      	; 0x2064 <LCD_moveCursor+0x20>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 32       	cpi	r24, 0x28	; 40
    2062:	38 f0       	brcs	.+14     	; 0x2072 <LCD_moveCursor+0x2e>
		LCD_clearScreen();
    2064:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
		/* 16 character Error message */
		LCD_displayString("ERR MOV CURSOR !");
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_displayString>
    2070:	31 c0       	rjmp	.+98     	; 0x20d4 <LCD_moveCursor+0x90>
		return;
	}

	switch (row) {
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	3d 83       	std	Y+5, r19	; 0x05
    207a:	2c 83       	std	Y+4, r18	; 0x04
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	91 05       	cpc	r25, r1
    2084:	c1 f0       	breq	.+48     	; 0x20b6 <LCD_moveCursor+0x72>
    2086:	2c 81       	ldd	r18, Y+4	; 0x04
    2088:	3d 81       	ldd	r19, Y+5	; 0x05
    208a:	22 30       	cpi	r18, 0x02	; 2
    208c:	31 05       	cpc	r19, r1
    208e:	2c f4       	brge	.+10     	; 0x209a <LCD_moveCursor+0x56>
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	61 f0       	breq	.+24     	; 0x20b0 <LCD_moveCursor+0x6c>
    2098:	1d c0       	rjmp	.+58     	; 0x20d4 <LCD_moveCursor+0x90>
    209a:	2c 81       	ldd	r18, Y+4	; 0x04
    209c:	3d 81       	ldd	r19, Y+5	; 0x05
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	31 05       	cpc	r19, r1
    20a2:	69 f0       	breq	.+26     	; 0x20be <LCD_moveCursor+0x7a>
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	83 30       	cpi	r24, 0x03	; 3
    20aa:	91 05       	cpc	r25, r1
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <LCD_moveCursor+0x82>
    20ae:	12 c0       	rjmp	.+36     	; 0x20d4 <LCD_moveCursor+0x90>
	case 0:
		address_counter = col;
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	0b c0       	rjmp	.+22     	; 0x20cc <LCD_moveCursor+0x88>
		break;
	case 1:
		address_counter = 0x40 + col;
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	80 5c       	subi	r24, 0xC0	; 192
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <LCD_moveCursor+0x88>
		break;
	case 2:
		address_counter = 0x14 + col;
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	8c 5e       	subi	r24, 0xEC	; 236
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	03 c0       	rjmp	.+6      	; 0x20cc <LCD_moveCursor+0x88>
		break;
	case 3:
		address_counter = 0x54 + col;
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	8c 5a       	subi	r24, 0xAC	; 172
    20ca:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		return;
	}

	LCD_sendCommand(LCD_SET_DDRAM_ADDRESS | address_counter);
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	80 68       	ori	r24, 0x80	; 128
    20d0:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(const char *str, uint8 row, uint8 col) {
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <LCD_displayStringRowColumn+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <LCD_displayStringRowColumn+0x8>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	6b 83       	std	Y+3, r22	; 0x03
    20f6:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(row, col);
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	6c 81       	ldd	r22, Y+4	; 0x04
    20fc:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_moveCursor>
	LCD_displayString(str);
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_displayString>
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <LCD_clearScreen>:

void LCD_clearScreen(void) {
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 11 0c 	call	0x1822	; 0x1822 <LCD_sendCommand>
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <LCD_integerToString>:

void LCD_integerToString(uint8 integer) {
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	61 97       	sbiw	r28, 0x11	; 17
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	89 8b       	std	Y+17, r24	; 0x11
	/* array of char to hold the ASCII value */
	char buff[LCD_CHARACTERS];
	itoa(integer, buff, 10);
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9e 01       	movw	r18, r28
    2148:	2f 5f       	subi	r18, 0xFF	; 255
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	b9 01       	movw	r22, r18
    214e:	4a e0       	ldi	r20, 0x0A	; 10
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	0e 94 42 11 	call	0x2284	; 0x2284 <itoa>
	LCD_displayString(buff);
    2156:	ce 01       	movw	r24, r28
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_displayString>
}
    215e:	61 96       	adiw	r28, 0x11	; 17
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <main>:
#include "gpio.h"
#include "lcd.h"
#include <util/delay.h>

int main()
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	a1 97       	sbiw	r28, 0x21	; 33
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
	gpio_init();
    2184:	0e 94 a5 05 	call	0xb4a	; 0xb4a <gpio_init>
	LCD_init();
    2188:	0e 94 33 08 	call	0x1066	; 0x1066 <LCD_init>

	const char me_string[] = "Iam Abdelrahman";
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	99 8f       	std	Y+25, r25	; 0x19
    2192:	88 8f       	std	Y+24, r24	; 0x18
    2194:	e1 e1       	ldi	r30, 0x11	; 17
    2196:	f1 e0       	ldi	r31, 0x01	; 1
    2198:	fb 8f       	std	Y+27, r31	; 0x1b
    219a:	ea 8f       	std	Y+26, r30	; 0x1a
    219c:	f0 e1       	ldi	r31, 0x10	; 16
    219e:	fc 8f       	std	Y+28, r31	; 0x1c
    21a0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    21a2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    21a4:	00 80       	ld	r0, Z
    21a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	9b 8f       	std	Y+27, r25	; 0x1b
    21ae:	8a 8f       	std	Y+26, r24	; 0x1a
    21b0:	e8 8d       	ldd	r30, Y+24	; 0x18
    21b2:	f9 8d       	ldd	r31, Y+25	; 0x19
    21b4:	00 82       	st	Z, r0
    21b6:	88 8d       	ldd	r24, Y+24	; 0x18
    21b8:	99 8d       	ldd	r25, Y+25	; 0x19
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	99 8f       	std	Y+25, r25	; 0x19
    21be:	88 8f       	std	Y+24, r24	; 0x18
    21c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c2:	91 50       	subi	r25, 0x01	; 1
    21c4:	9c 8f       	std	Y+28, r25	; 0x1c
    21c6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    21c8:	ee 23       	and	r30, r30
    21ca:	51 f7       	brne	.-44     	; 0x21a0 <main+0x30>
	const char hello[] = "Hello!";
    21cc:	ce 01       	movw	r24, r28
    21ce:	41 96       	adiw	r24, 0x11	; 17
    21d0:	9e 8f       	std	Y+30, r25	; 0x1e
    21d2:	8d 8f       	std	Y+29, r24	; 0x1d
    21d4:	e1 e2       	ldi	r30, 0x21	; 33
    21d6:	f1 e0       	ldi	r31, 0x01	; 1
    21d8:	f8 a3       	std	Y+32, r31	; 0x20
    21da:	ef 8f       	std	Y+31, r30	; 0x1f
    21dc:	f7 e0       	ldi	r31, 0x07	; 7
    21de:	f9 a3       	std	Y+33, r31	; 0x21
    21e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    21e2:	f8 a1       	ldd	r31, Y+32	; 0x20
    21e4:	00 80       	ld	r0, Z
    21e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	98 a3       	std	Y+32, r25	; 0x20
    21ee:	8f 8f       	std	Y+31, r24	; 0x1f
    21f0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    21f2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    21f4:	00 82       	st	Z, r0
    21f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	9e 8f       	std	Y+30, r25	; 0x1e
    21fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2200:	99 a1       	ldd	r25, Y+33	; 0x21
    2202:	91 50       	subi	r25, 0x01	; 1
    2204:	99 a3       	std	Y+33, r25	; 0x21
    2206:	e9 a1       	ldd	r30, Y+33	; 0x21
    2208:	ee 23       	and	r30, r30
    220a:	51 f7       	brne	.-44     	; 0x21e0 <main+0x70>
	LCD_displayString(hello);
    220c:	ce 01       	movw	r24, r28
    220e:	41 96       	adiw	r24, 0x11	; 17
    2210:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <LCD_displayString>
    2214:	ff cf       	rjmp	.-2      	; 0x2214 <main+0xa4>

00002216 <__prologue_saves__>:
    2216:	2f 92       	push	r2
    2218:	3f 92       	push	r3
    221a:	4f 92       	push	r4
    221c:	5f 92       	push	r5
    221e:	6f 92       	push	r6
    2220:	7f 92       	push	r7
    2222:	8f 92       	push	r8
    2224:	9f 92       	push	r9
    2226:	af 92       	push	r10
    2228:	bf 92       	push	r11
    222a:	cf 92       	push	r12
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	ca 1b       	sub	r28, r26
    2240:	db 0b       	sbc	r29, r27
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	09 94       	ijmp

0000224e <__epilogue_restores__>:
    224e:	2a 88       	ldd	r2, Y+18	; 0x12
    2250:	39 88       	ldd	r3, Y+17	; 0x11
    2252:	48 88       	ldd	r4, Y+16	; 0x10
    2254:	5f 84       	ldd	r5, Y+15	; 0x0f
    2256:	6e 84       	ldd	r6, Y+14	; 0x0e
    2258:	7d 84       	ldd	r7, Y+13	; 0x0d
    225a:	8c 84       	ldd	r8, Y+12	; 0x0c
    225c:	9b 84       	ldd	r9, Y+11	; 0x0b
    225e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2260:	b9 84       	ldd	r11, Y+9	; 0x09
    2262:	c8 84       	ldd	r12, Y+8	; 0x08
    2264:	df 80       	ldd	r13, Y+7	; 0x07
    2266:	ee 80       	ldd	r14, Y+6	; 0x06
    2268:	fd 80       	ldd	r15, Y+5	; 0x05
    226a:	0c 81       	ldd	r16, Y+4	; 0x04
    226c:	1b 81       	ldd	r17, Y+3	; 0x03
    226e:	aa 81       	ldd	r26, Y+2	; 0x02
    2270:	b9 81       	ldd	r27, Y+1	; 0x01
    2272:	ce 0f       	add	r28, r30
    2274:	d1 1d       	adc	r29, r1
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	ed 01       	movw	r28, r26
    2282:	08 95       	ret

00002284 <itoa>:
    2284:	fb 01       	movw	r30, r22
    2286:	9f 01       	movw	r18, r30
    2288:	e8 94       	clt
    228a:	42 30       	cpi	r20, 0x02	; 2
    228c:	c4 f0       	brlt	.+48     	; 0x22be <itoa+0x3a>
    228e:	45 32       	cpi	r20, 0x25	; 37
    2290:	b4 f4       	brge	.+44     	; 0x22be <itoa+0x3a>
    2292:	4a 30       	cpi	r20, 0x0A	; 10
    2294:	29 f4       	brne	.+10     	; 0x22a0 <itoa+0x1c>
    2296:	97 fb       	bst	r25, 7
    2298:	1e f4       	brtc	.+6      	; 0x22a0 <itoa+0x1c>
    229a:	90 95       	com	r25
    229c:	81 95       	neg	r24
    229e:	9f 4f       	sbci	r25, 0xFF	; 255
    22a0:	64 2f       	mov	r22, r20
    22a2:	77 27       	eor	r23, r23
    22a4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__udivmodhi4>
    22a8:	80 5d       	subi	r24, 0xD0	; 208
    22aa:	8a 33       	cpi	r24, 0x3A	; 58
    22ac:	0c f0       	brlt	.+2      	; 0x22b0 <itoa+0x2c>
    22ae:	89 5d       	subi	r24, 0xD9	; 217
    22b0:	81 93       	st	Z+, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	a1 f7       	brne	.-24     	; 0x22a0 <itoa+0x1c>
    22b8:	16 f4       	brtc	.+4      	; 0x22be <itoa+0x3a>
    22ba:	5d e2       	ldi	r21, 0x2D	; 45
    22bc:	51 93       	st	Z+, r21
    22be:	10 82       	st	Z, r1
    22c0:	c9 01       	movw	r24, r18
    22c2:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <strrev>

000022c6 <strrev>:
    22c6:	dc 01       	movw	r26, r24
    22c8:	fc 01       	movw	r30, r24
    22ca:	67 2f       	mov	r22, r23
    22cc:	71 91       	ld	r23, Z+
    22ce:	77 23       	and	r23, r23
    22d0:	e1 f7       	brne	.-8      	; 0x22ca <strrev+0x4>
    22d2:	32 97       	sbiw	r30, 0x02	; 2
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <strrev+0x18>
    22d6:	7c 91       	ld	r23, X
    22d8:	6d 93       	st	X+, r22
    22da:	70 83       	st	Z, r23
    22dc:	62 91       	ld	r22, -Z
    22de:	ae 17       	cp	r26, r30
    22e0:	bf 07       	cpc	r27, r31
    22e2:	c8 f3       	brcs	.-14     	; 0x22d6 <strrev+0x10>
    22e4:	08 95       	ret

000022e6 <__udivmodhi4>:
    22e6:	aa 1b       	sub	r26, r26
    22e8:	bb 1b       	sub	r27, r27
    22ea:	51 e1       	ldi	r21, 0x11	; 17
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <__udivmodhi4_ep>

000022ee <__udivmodhi4_loop>:
    22ee:	aa 1f       	adc	r26, r26
    22f0:	bb 1f       	adc	r27, r27
    22f2:	a6 17       	cp	r26, r22
    22f4:	b7 07       	cpc	r27, r23
    22f6:	10 f0       	brcs	.+4      	; 0x22fc <__udivmodhi4_ep>
    22f8:	a6 1b       	sub	r26, r22
    22fa:	b7 0b       	sbc	r27, r23

000022fc <__udivmodhi4_ep>:
    22fc:	88 1f       	adc	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	5a 95       	dec	r21
    2302:	a9 f7       	brne	.-22     	; 0x22ee <__udivmodhi4_loop>
    2304:	80 95       	com	r24
    2306:	90 95       	com	r25
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	08 95       	ret

0000230e <_exit>:
    230e:	f8 94       	cli

00002310 <__stop_program>:
    2310:	ff cf       	rjmp	.-2      	; 0x2310 <__stop_program>
